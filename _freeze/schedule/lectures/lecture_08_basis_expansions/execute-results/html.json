{
  "hash": "5e6a7d7eeaeb8ffe5430206b0c0d6544",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 8: Basis Expansions\"\nauthor: \"Geoff Pleiss\"\ndate: last-modified\nformat: html\n---\n\n\n\n## Learning Objectives\n\nBy the end of this lecture, you should be able to:\n\n1. Construct polynomial, spline, and Fourier basis expansions for regression\n2. Select appropriate basis functions based on problem characteristics\n3. Articulate how basis expansions affect bias and variance\n4. Differentiate between linearity and nonlinearity in terms of parameterization versus functional form\n\n## Overview\n\nWe have spent the last few lectures discussing methods to reduce variance in linear models.\n\n0. Manual variable selection\n1. Ridge regression (shrink all parameters)\n2. Lasso regression (set some parameters to zero)\n\n- In this lecture, we will focus on the other side of the bias-variance tradeoff, and introduce a method to reduce bias in linear models.\n- Crucially, our bias reduction method will allow us to retain linearity with respect to the learned parameters while allowing for nonlinearity with respect to the input features.\n- The method, basis expansions, is a generalization of the idea of **interaction terms** that you saw in STAT 306.\n\n## Motivation\n\n- We have typically assumed a statistical model where $\\mathbb E[Y \\mid X]$ is a linear function of the input features $X$, i.e. $\\mathbb E[Y \\mid X] = X^\\top \\beta$ for some $\\beta \\in \\mathbb R^p$.\n- We will now relax this assumption of linearity, and instead assume that\n\n  $$\\mathbb E[Y \\mid X] = f(X)$$\n\n  for some unknown function $f: \\mathbb R^p \\to \\mathbb R$.\n- Using a predictive model of the form $\\hat f_\\mathcal{D}(X) = X^\\top \\hat \\beta$, like what we get from OLS, will not work well if $f$ is highly nonlinear; it will be a high-bias predictor.\n\n:::{.callout-important title=\"But Isn't OLS Unbiased?\"}\n  - Recall that OLS is unbiased **only under the assumptions made by the linear statistical model**.\n  - Under the more general model $\\mathbb E[Y \\mid X] = f(X)$, OLS is biased unless $f$ is actually linear.\n  - To see why this is the case, let's do a Taylor expansion of $f$ around $0$.\n\n  $$f(X) = f(0) + \\nabla f(0)^\\top X + \\frac{1}{2} X^\\top H_f(0) X + \\ldots$$\n\n  Even if OLS were to perfectly estimate $\\hat \\beta = \\nabla f(0)$, the higher-order terms would still be missing, and so $\\mathbb E[\\hat f_\\mathcal{D}(X) \\mid X] \\neq f(X)$.\n:::\n\n:::{.callout-tip collapse=\"true\" title=\"Quiz: Will Ridge or Lasso Be Beneficial in this Situation?\"}\n  Probably not.\n\n  - Ridge and Lasso reduce variance and introduce bias, and we will likely be in a high-bias situation already.\n  - More specifically, Ridge and Lasso still produce predictors of the form $\\hat f_\\mathcal{D}(X) = X^\\top \\hat \\beta$, which are still missing the higher-order terms that create the bias problem in the first place.\n:::\n\n## Warmup: Polynomial Basis Expansions for $p=1$\n- Why don't we just use a predictive model that includes the higher-order terms?\n- For example, if $p=1$, we could learn a model of the form:\n\n  $$\\hat f_\\mathcal{D}(x) = \\hat \\beta_0 + \\hat \\beta_1 x + \\hat \\beta_2 x^2 + \\ldots + \\hat \\beta_d x^d.$$\n\n- As $d \\to \\infty$, there exists some set of coefficients $\\hat \\beta_0, \\ldots, \\hat \\beta_d$ such that $f(x) = \\sum_{j=0}^d \\beta_j x^j$.\n\n- This model is known as a **polynomial regression model**, or a **polynomial basis expansion**.\n\n:::{.callout-note title=\"Linearity vs. Nonlinearity\"}\n- This model is **non-linear** in $X$ (because of the $x^2, \\ldots, x^d$ terms)\n- However, it is still **linear** in the parameters $\\hat \\beta_0, \\ldots, \\hat \\beta_d$.\n- Therefore, we can pretend as if we have a dataset with $d$ features $(X, X^2, \\ldots, X^d)$ and use OLS/Ridge/LASSO to learn the parameters $\\hat \\beta_0, \\ldots, \\hat \\beta_d$.\n:::\n\n### Bias Reduction\n\nUsing higher-order polynomial terms can significantly reduce bias.\n\n- Let's assume that, under our statistical model, $\\mathbb E[Y \\mid X] = f(x)$ for some $d^\\mathrm{th}$ degree polynomial $f$.\n- Let's also assume that we use a $d^\\mathrm{th}$ degree polynomial basis expansion to learn a predictor $\\hat f_\\mathcal{D}(x) = \\sum_{j=0}^d \\hat \\beta_j x^j$ using OLS.\n- Then $\\hat f_\\mathcal{D}(x)$ is an unbiased estimator of $f(x)$!\n\n  <details>\n    <summary>Why</summary>\n  - Again, we can pretend as if we're working with a dataset with $d$ features $(X, X^2, \\ldots, X^d)$.\n  - Under our statistical model, $\\mathbb E[Y \\mid X, X^2, \\ldots, X^d] = \\sum_{i=1}^d \\beta_i X^i$\n  - By what we derived two lectures ago, OLS with the features $(X, X^2, \\ldots, X^d)$ will be unbiased for estimating $\\beta_0, \\ldots, \\beta_d$.\n  </details>\n\n### Example\n\n- Below we'll plot the OLS fit using polynomial basis expansions of different orders on the `arcuate` dataset from the `Stat406` package.\n- The standard linear model (no basis expansion) is a poor fit for the data. This error is likely due to high bias, because there's enough data to estimate two parameters with little variance, but the linear model is too simple to capture the relationship between `position` and `fa`.\n- As we increase the order of the polynomial basis expansion, the fit improves significantly, and the bias is reduced.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(406406)\nlibrary(tidyverse)\ndata(arcuate, package = \"Stat406\")\narcuate <- arcuate |> slice_sample(n = 220)\narcuate |>\n  ggplot(aes(position, fa)) +\n  geom_point(color = \"black\") +\n  geom_smooth(aes(color = \"a\"), formula = y ~ x, method = \"lm\", se = FALSE) +\n  geom_smooth(aes(color = \"b\"), formula = y ~ poly(x, 4), method = \"lm\", se = FALSE) +\n  geom_smooth(aes(color = \"c\"), formula = y ~ poly(x, 7), method = \"lm\", se = FALSE) +\n  geom_smooth(aes(color = \"d\"), formula = y ~ poly(x, 25), method = \"lm\", se = FALSE) +\n  scale_color_manual(\n    name = \"Taylor order\",\n    values = c(\"a\" = \"grey\", \"b\" = \"blue\", \"c\" = \"red\", \"d\" = \"green\"),\n    labels = c(\"1 term\", \"4 terms\", \"7 terms\", \"25 terms\")\n  )\n```\n\n::: {.cell-output-display}\n![](lecture_08_basis_expansions_files/figure-html/polynomial-orders-1.png){width=768}\n:::\n:::\n\n\n\n## Polynomial Basis Expansions for $p>1$\n\n- For $p>1$, we have to include a few more terms.\n- For $x \\in \\mathbb R^p$, the Taylor expansion of $f(x)$ around $0$ is:\n\n  $$f(X) = f(0) + \\nabla f(0)^\\top X + \\frac{1}{2} X^\\top H_f(0) X + \\ldots,$$\n\n  where $\\nabla f(0) \\in \\mathbb R^p$ is the gradient of $f$ at $0$, and $H_f(0) \\in \\mathbb R^{p \\times p}$ is the Hessian of $f$ at $0$.\n\n- The gradient has $p$ entries, and the Hessian has $p(p+1)/2$ unique entries (since it is a symmetric matrix).\n\n- Thus, the second-order polynomial basis expansion will be of the form:\n\n  $$\\hat f_\\mathcal{D}(x) = \\hat \\beta_0 + \\sum_{j=1}^p \\hat \\beta_j x_j + \\sum_{j=1}^p \\sum_{k=j}^p \\hat \\beta_{jk} x_j x_k.$$\n\n- The $\\beta_{jk}$ parameters for $j \\neq k$ are called **interaction terms**, which you studied in STAT 306.\n\n- This model contains $1 + p + p(p+1)/2 = 1 + p(p+3)/2$ parameters, which is $O(p^2)$.\n\n- If $n$ is not much larger than $p^2$, then including these interaction terms could push us back into a high-variance regime.\n\n- We will come back to this parameter growth issue in the next module.\n\n:::{.callout-tip title=\"Basis Expansions and Regularization\"}\n- If $p$ is large, it may be a good idea to use basis expansions in conjunction with Ridge or Lasso.\n- Adding $O(p^2)$ interaction terms will reduce bias (at the cost of increased variance), and Ridge/Lasso can help reduce the variance that is introduced.\n- This is just one example where we need to use both bias reduction and variance reduction techniques together to get a good predictor!\n:::\n\n## Other Basis Expansions\n\n- Besides polynomials, there are two other common basis expansions: **Fourier basis expansions** and **splines**.\n- As with polynomials, both create nonlinear functions of the input features while remaining linear in the parameters.\n\n### Fourier Basis Expansions\n\n- Recall that (most) $\\mathbb R \\to \\mathbb R$ functions can be expressed by their **Fourier series**:\n\n  $$f(x) = a_0 + \\sum_{j=1}^\\infty a_j \\cos(j 2 \\pi x) + b_j \\sin(j 2 \\pi x)$$\n\n- We can thus consider a predictive model of the form:\n\n  $$\\hat f_\\mathcal{D}(x) = \\hat a_0 + \\sum_{j=1}^d \\hat a_j \\cos(j 2 \\pi x) + \\hat b_j \\sin(j 2 \\pi x)$$\n\n  for some $d \\in \\mathbb N$.\n\n- Higher values of $d$ will be capable of fitting more complex functions (i.e. reduce bias), but as $d$ gets close to $n$, we will likely enter a high-variance regime.\n\n### Splines\n\n- A **spline** is a piecewise polynomial function that is smooth at the places where the pieces meet.\n- For example, a **linear spline** is a function of the form:\n\n  $$\n  f(x) =\n  \\begin{cases}\n    \\beta_0 + \\beta_1 x & x < k_1 \\\\\n    \\beta_0 + \\beta_1 x + \\beta_2 (x - k_1) & k_1 \\leq x < k_2 \\\\\n    \\beta_0 + \\beta_1 x + \\beta_2 (x - k_1) + \\beta_3 (x - k_2) & k_2 \\leq x < k_3 \\\\\n    \\ldots\n  \\end{cases}\n  $$\n\n  where $k_1, k_2, \\ldots$ are called **knots**.\n- The function is continuous at the knots, but not differentiable.\n- Again, increasing the number of knots will reduce bias but increase variance.\n\n### Comparison of Basis Expansions\n\n- Below is a comparison of the first 5 \"features\" created by each of the three basis expansions we discussed: polynomial, linear splines, and Fourier for a $p=1$ input.\n- All three basis expansions can represent (nearly) all functions as $d\\to\\infty$, but some basis expansions may be more appropriate for certain problems for a fixed value of $d$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(cowplot)\nlibrary(ggplot2)\n\nrelu_shifted <- function(x, shift) {pmax(0, x - shift)}\n\n# Create a sequence of x values\nx_vals <- seq(-3, 3, length.out = 1000)\n\n# Create a data frame with all the shifted functions\ndata <- data.frame(\n  x = rep(x_vals, 5),\n  polynomial = c(x_vals, x_vals^2, x_vals^3, x_vals^4, x_vals^5),\n  linear.splines = c(relu_shifted(x_vals, 2), relu_shifted(x_vals, 1), relu_shifted(x_vals, 0), relu_shifted(x_vals, -1), relu_shifted(x_vals, -2)),\n  fourier = c(cos(pi / 2 * x_vals), sin(pi / 2 * x_vals), cos(pi / 4 * x_vals), sin(pi / 4 * x_vals), cos(pi * x_vals)),\n  function_label = rep(c(\"f1\", \"f2\", \"f3\", \"f4\", \"f5\"), each = length(x_vals))\n)\n\n# Plot using ggplot2\ng1 <- ggplot(data, aes(x = x, y = polynomial, color = function_label)) +\n      geom_line(size = 1, show.legend=FALSE) +\n      theme(axis.text.y=element_blank())\ng2 <- ggplot(data, aes(x = x, y = linear.splines, color = function_label)) +\n      geom_line(size = 1, show.legend=FALSE) +\n      theme(axis.text.y=element_blank())\ng3 <- ggplot(data, aes(x = x, y = fourier, color = function_label)) +\n      geom_line(size = 1, show.legend=FALSE) +\n      theme(axis.text.y=element_blank())\n\nplot_grid(g1, g2, g3, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](lecture_08_basis_expansions_files/figure-html/unnamed-chunk-1-1.png){width=864}\n:::\n:::\n\n\n\n:::{.callout-note title=\"Choosing a Basis Expansion\"}\n- There is no universally best basis expansion.\n- You can try all three basis expansions and use cross-validation to select the best one.\n- You can include combinations of basis expansions (e.g. polynomial + splines), and use LASSO to select the best ones.\n- You can also use domain knowledge to select a basis expansion that is appropriate for your problem.\n:::\n\n## Summary\n- Basis expansions are a method to reduce bias in linear models by allowing for nonlinearity with respect to the input features while retaining linearity with respect to the parameters.\n- Common basis expansions include polynomial basis expansions, Fourier basis expansions, and splines.\n- Basis expansions can be used in conjunction with Ridge or Lasso to control variance when the number of parameters grows large.\n- There is no universally best basis expansion; you can try multiple basis expansions.\n- The number of parameters for basis expansions can grow quickly with the number of input features; we will discuss this issue in more detail in the next module.\n",
    "supporting": [
      "lecture_08_basis_expansions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}