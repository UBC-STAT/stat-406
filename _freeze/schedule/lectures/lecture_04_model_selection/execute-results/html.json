{
  "hash": "edd6b64e751af5833ad82204f9490f47",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 4: Model Selection\"\nauthor: \"Geoff Pleiss\"\ndate: last-modified\nformat: html\n---\n\n\n\n## Learning Objective\n\nBy the end of this lecture, you should be able to:\n\n1. Define and differentiate between testing error, expected test error, and risk\n2. Choose amongst metrics and estimators for model selection on a variety of problems\n3. Identify when a validation-set estimator of risk is biased or (nearly) unbiased\n4. Perform cross-validation to perform variable selection in linear regression\n\n## Motivation\n\nWe are now going to fill in the remaining steps of the learning procedure from a statistical perspective.\nWe've already covered defining the statistical model, estimation, and prediction.\n\n| Step | CS Perspective | Statistical Perspective | Example: Linear Regression |\n| ---- | -------------- | ----------------------- | -------------------------- |\n| 1    | Split data into train/test/val | ???     | ???                        |\n| 2    | Hypothesis Class | Statistical Model     | $\\mathbb{E}[Y \\mid X = x] = x^\\top \\beta$ |\n| 3    | Training       | Estimation              | $\\hat{\\beta}_\\mathrm{MLE/OLS} = (\\boldsymbol{X}^\\top \\boldsymbol{X})^{-1} \\boldsymbol{X}^\\top \\boldsymbol{Y}$ |\n| 4    | Validation      | ???                    | ???                        |\n| 5    | Iteration       | ???                    | ???                        |\n| 6    | Testing (Inference) | Prediction         | $\\hat{Y}_\\mathrm{new} = X_\\mathrm{new}^\\top \\hat{\\beta}$ |\n\n- From a statistical perspective, steps 1, 4, and 5 blur together in a procedure we call **model selection.**\n- At a high level, the purpose of these three steps is to **choose the best statistical model given our training data.**\n\n## Defining \"The Best Model\"\n\n### Possible Metrics for \"Best Model\"\n\n1. **Test error**\n\n    - On (almost) every learning task, we usually withhold some test data $\\left\\{ (X_j, Y_j) \\right\\}_{j=1}^t$,\n      assumed to be i.i.d. from the same distribution as our training data.\n\n    - Given our training set $\\mathcal D = \\left\\{ (X_i, Y_i) \\right\\}_{i=1}^n$, the test error is:\n\n      $$ \\widehat{\\mathrm{Err}}_\\mathcal{D} := \\frac{1}{t} \\sum_{j=1}^t L(Y_j, f_\\mathcal{D}(X_j)) $$\n\n    - I.e. we train our model $\\hat f$ on $\\mathcal D$, and then compute its average loss on the test dataset.\n\n2. **Expected test error**\n\n    - As $t \\to \\infty$, $\\widehat{\\mathrm{Err}}_\\mathcal{D}$ converges (by the law of large numbers) to:\n      $$ \\mathrm{Err}_\\mathcal{D} := \\mathbb E \\left[ L(Y, \\hat f_\\mathcal{D}(X)) \\mid \\mathcal D \\right] $$\n\n    - We call this the **expected test error**.\n    - Note that the training set $\\mathcal D$ is fixed.\n\n        <details>\n          <summary>Why?</summary>\n\n          We are assuming that the number of test samples $t$ goes to infinity, but we're assuming the training set doesn't change.\n          So we're averaging over the randomness in the test point $(X, Y)$ only, but not the randomness in the training set $\\mathcal D$.\n        </details>\n\n    - **Intuition:** your boss hands you training set $\\mathcal D$, and you train a $\\hat f_\\mathcal{D}$\n      that's going to be deployed for a very very long time.\n      $\\mathrm{Err}_\\mathcal{D}$ estimates the error you'll get on the many many predictions that will be made by your model.\n\n3. **Risk**\n\n    - **Risk**, which is one level more abstract than expected test error, averages over *all sources of randomness*:\n    $$ \\mathcal R := \\mathbb E \\left[ L \\left( Y, \\hat f_{\\mathcal D}(X) \\right) \\right] $$\n\n    - Note that *all sources of randomness* includes the test datapoint $(X, Y)$ as well as the training dataset $\\mathcal D$.\n    - We can relate $\\mathcal R$ to the expected test error via:\n\n      $$ \\mathcal R = \\mathbb E \\left[ \\mathrm{Err}_\\mathcal{D} \\right] $$\n\n      <details>\n        <summary>Why?</summary>\n\n        **Tower rule!!!**\n\n        \\begin{align*}\n          \\mathcal R &= \\mathbb E \\left[ L \\left( Y, \\hat f_{\\mathcal D}(X) \\right) \\right] \\\\\n          &= \\mathbb E \\left[ \\mathbb E \\left[ L \\left( Y, \\hat f_{\\mathcal D}(X) \\right)  \\mid \\mathcal D \\right] \\right] \\\\\n          &= \\mathbb E \\left[ \\mathrm{Err}_\\mathcal{D} \\right]\n        \\end{align*}\n      </details>\n\n    - **Intuition:** if you were to get a new training set $\\mathcal D'$ and retrain your model, how well would it perform on average?\n\n### In a Perfect World, Which Metric Should We Use?\n\n- Let's ignore the fact that we have access to limited amounts of data,\nand pretend that we happened to know all three of these metrics exactly.\nWhich one should we use?\n\n- Test error is out. There's nothing special about the particular test set we happened to withhold.\n  We'd much rather know the average error over all possible points, so expected test error is strictly better.\n\n- Regarding expected test error vs. risk, there's some debate.\n  In general I would argue that risk is actually the metric we care most about.\n\n::: {.callout-note collapse=\"true\" title=\"Expected Test Error vs. Risk\"}\n**Reasons to prefer expected test error**\n\n- In practice, we only have one training set $\\mathcal D$.\n- Expected test error tells us how well our model will perform on the *particular training set* we are given.\n\n**Reasons to prefer risk**\n\n- In practice, we might get new data to retrain our model on;\n  we don't want a metric that's dependent on a particular training set.\n- If we're trying to select a \"best\" model, we'd ideally like one that's not too sensitive to the particular training set we happened to get.\n- As we will see next lecture, risk is easier to analyze theoretically.\n:::\n\n- In 75% of scenarios, it doesn't matter if we target risk or expected test error.\n  (In practice, most estimators of risk are also estimators of expected test error, and vice versa.)\n  However, we'll see some cases (e.g. on Homework 2) where the distinction matters.\n\n## Estimating Risk\n\n### Bad Idea: Training Error\n\n- A common mistake is to use **training error** as an estimator of risk:\n\n  $$ \\widehat{\\mathrm{Err}}_\\mathrm{train} := \\frac{1}{n} \\sum_{i=1}^n L(Y_i, f_\\mathcal{D}(X_i)) $$\n\n- Training error is almost always a **severely biased** estimator of risk,\n  and should never be used for model selection.\n\n  <details>\n    <summary>Why?</summary>\n\n    - The training error is computed on the same data that was used to train the model.\n    - Therefore, the model has \"seen\" this data before, and has likely fit it quite well.\n    - In contrast, risk is computed on new, unseen data.\n    - As a result, training error underestimates the true risk of the model.\n\n    **Example**: consider a dataset with $p$ points and a linear model with $p$ parameters.\n    Running OLS on this dataset will result in zero training error,\n    but the risk of this model will be much higher than zero on new data!\n  </details>\n\n- (Training error does indeed have its uses; we'll see one example next lecture!)\n\n### Ideal Solution: Many Samples of Training Data + One Test Point\n\n- Imagine we had access to a generator that produces random $\\left\\{ (X_i, Y_i) \\right\\}_{i=1}^{n+1}$ samples,\n  where the $n+1$ pairs are i.i.d.\n- We could estimate risk by:\n\n    1. Generating $m$ samples $\\left\\{ \\left\\{ (X_i^{(j)}, Y_i^{(j)} \\right\\}_{i=1}^{n+1} \\right\\}_{j=1}^{m}$\n\n    2. Estimate risk as:\n    $$ \\hat{\\mathcal R} \\approx \\frac{1}{m} \\sum_{i=1}^m L_j,\n    \\quad L_j = L\\left( Y_{n+1}^{(j)}, f_{\\mathcal D^{(j)}}( X^{(j)}_{n+1}) \\right),\n    \\quad \\mathcal D^{(j)} = \\left\\{ (X_i^{(j)}, Y_i^{(j)}) \\right\\}_{i=1}^n.\n    $$\n\n    - In other words, for each of the $m$ samples, we train a model on the first $n$ data points,\n      and compute its loss on the $n+1^\\mathrm{th}$ datapoint we withhold from training.\n\n- By the law of large numbers, as $m \\to \\infty$ we have:\n\n  $$\\hat{\\mathcal R} \\to \\mathbb E[ L( Y_{n+1}, \\hat f_\\mathcal{D}( X_{n+1}) )] = \\mathcal R$$\n\n### Practical Solution: Cross-Validation\n\n- In practice, we only have access to a single dataset $\\mathcal D = \\left\\{ (X_i, Y_i) \\right\\}_{i=1}^n$\n  with $n$ data points.\n- Nevertheless: we can approximate the ideal solution above using **leave-one-out cross-validation (LOO-CV)**.\n\n:::{.callout-tip title=\"Cross Validation\"}\n- Given: a single dataset $\\mathcal D = \\left\\{ (X_i, Y_i) \\right\\}_{i=1}^n$\n- For each $i = 1, \\ldots, n$:\n    1. Train a model $\\hat f_{\\mathcal D_{-i}}$ on the dataset with the $i^\\mathrm{th}$ point removed:\n      $\\mathcal D_{-i} := \\left\\{ (X_j, Y_j) \\right\\}_{j \\neq i}$\n    2. Compute the loss on the withheld point:\n      $L_i := L(Y_i, \\hat f_{\\mathcal D_{-i}}(X_i))$\n    3. Estimate risk as:\n      $\\hat{\\mathcal R}_\\mathrm{LOOCV} := \\frac{1}{n} \\sum_{i=1}^n L_i$\n:::\n\n#### Why Does LOO-CV Work?\n\n- Each $L_i$ is an unbiased estimate of risk on a training set of size $n-1$:\n\n  \\begin{align*}\n    \\mathbb E[L_i] &= \\mathbb E \\left[ L(Y_i, \\hat f_{\\mathcal D_{-i}}(X_i)) \\right] =: \\mathcal R_{n-1} \\\\\n  \\end{align*}\n\n- By *linearity of expectation*, we also have that $\\hat{\\mathcal R}_\\mathrm{LOOCV}$ is an unbiased estimate of risk on a training set of size $n-1$:\n\n  <details>\n    <summary>Derivation:</summary>\n\n    \\begin{align*}\n      \\mathbb E[\\hat{\\mathcal R}_\\mathrm{LOOCV}] = \\mathbb E \\left[ \\frac{1}{n} \\sum_{i=1}^n L_i \\right]\n      = \\frac{1}{n} \\sum_{i=1}^n \\mathbb E[L_i] = \\mathcal R_{n-1}\n    \\end{align*}\n  </details>\n\n- Unlike our \"ideal estimator\" above, the $L_i$ are not independent,\n  and therefore we can't apply the law of large numbers to conclude that $\\hat{\\mathcal R}_\\mathrm{LOOCV}$ converges to $\\mathcal R$.\n\n- In practice, however, $\\hat{\\mathcal R}_\\mathrm{LOOCV}$ is often a good estimator of risk.\n\n\n#### A More Efficient Solution: K-Fold Cross Validation\n\n- LOO-CV requires training $n$ separate models, which can be very expensive.\n- A more efficient alternative is **K-fold cross validation (K-CV)**:\n\n:::{.callout-tip title=\"K-Fold Cross Validation\"}\n- Given: a single dataset $\\mathcal D = \\left\\{ (X_i, Y_i) \\right\\}_{i=1}^n$\n- Randomly split $\\mathcal D$ into $K$ (roughly) equal-sized \"folds\":\n  $\\mathcal D_1, \\ldots, \\mathcal D_K$\n- For each $k = 1, \\ldots, K$:\n    1. Train a model $\\hat f_{\\mathcal D_{-k}}$ on the dataset with the $k^\\mathrm{th}$ fold removed:\n      $\\mathcal D_{-k} := \\bigcup_{j \\neq k} \\mathcal D_j$\n    2. Compute the loss on the withheld fold:\n      $L_k := \\frac{1}{|\\mathcal D_k|} \\sum_{(X_i, Y_i) \\in \\mathcal D_k} L(Y_i, \\hat f_{\\mathcal D_{-k}}(X_i))$\n    3. Estimate risk as:\n      $\\hat{\\mathcal R}_\\mathrm{K-CV} := \\frac{1}{K} \\sum_{k=1}^K L_k$\n:::\n\n- Decreasing $K$ decreases the number of models we need to train.\n- However, decreasing $K$ also results in a worse estimator of risk.\n\n  <details>\n    <summary>Why?</summary>\n\n    **Intuitively**: as $K$ decreases, each model is trained on less data,\n    and we're trying to estimate the risk of a model trained on all $n$ data points.\n\n    **Formally**: each $L_k$ is an unbiased estimate of risk on a training set of size $n - n/K$,\n    but the difference between $\\mathcal R_n$ and $\\mathcal R_{n - n/K}$ can be significant for small $K$.\n  </details>\n\n\n## Model Selection (Finally!)\n\nNow that we've chosen *risk* as our metric for \"the best model,\"\n**model selection** amounts to choosing the statistical model with the best risk.\n\n:::{.callout-tip title=\"Model Selection\"}\n- Given: a single dataset $\\mathcal D$\n- for however long you have,\n    1. Propose a statistical model (e.g. linear regression, decision tree, neural network, etc.)\n    2. Estimate its parameters on $\\mathcal D$ to get $\\hat f_\\mathcal{D}$\n    3. Estimate its risk $\\hat{\\mathcal R}$ using K-CV (or some other method)\n- Choose the model with the lowest estimated risk $\\hat{\\mathcal R}$\n:::\n\n### Example: Variable Selection\n\nConsider the following synthetic dataset, where we have:\n\n$$ Y = 3 X_1 + \\frac{1}{3} X_2 + \\epsilon, \\quad \\epsilon \\sim \\mathcal N(0, 0.5^2) $$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nset.seed(42)\nn <- 50\ndf <- tibble( # like data.frame, but columns can be functions of preceding\n  x1 = rnorm(n),\n  x2 = rnorm(n, mean = 2, sd = 1),\n  x3 = rexp(n, rate = 1),\n  x4 = x2 + rnorm(n, sd = .1), # correlated with x2\n  y = x1 * 3 + x2 / 3 + rnorm(n, sd = 0.5) # function of x1 and x2 only\n)\n```\n:::\n\n\n\nNote that $Y$ is a function of $X_1$ and $X_2$ only,\nand $X_3$ and $X_4$ are irrelevant to predicting $Y$.\n\nWe might consider the following statistical models (here written as linear regression models),\nin all cases assuming $\\epsilon \\sim \\mathcal N(0, \\sigma^2)$ for some $\\sigma > 0$:\n\n1. **Model 1**: $Y = \\beta_0 + \\beta_1 X_1 + \\epsilon$\n2. **Model 2**: $Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\epsilon$\n3. **Model 3**: $Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\beta_3 X_3 + \\epsilon$\n4. **Model 4**: $Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\beta_3 X_3 + \\beta_4 X_4 + \\epsilon$\n\n\n:::{.callout-important collapse=\"false\" title=\"Variable Selection is a Specific Instance of Model Selection\"}\nYou might recognize this setup as a **variable selection** problem.\n(Even more specifically, these model choices may remind you of *forward stepwise selection* from STAT 306).\n\nAdding covariates to our regression changes the set of distributions\nthat we are considering to represent our data (i.e. it changes our statistical model).\n\nNote that model selection is a much broader concept than variable selection.\nFor example, we might also consider:\n\n$$Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\beta_3 X_3 + \\beta_4 X_4 + \\beta_5 X_1^2 + \\epsilon$$\n\nThis model doesn't add any new covariates, but it does change the set of distributions we are considering.\n:::\n\nLet's use 5-fold cross validation to estimate the risk of each of these models:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cv) # NOTE: you can't use this package on Homework 1\n            # but for sure use it on your own projects!\n\nmodel1 <- lm(y ~ x1, data = df)\nmodel2 <- lm(y ~ x1 + x2, data = df)\nmodel3 <- lm(y ~ x1 + x2 + x3, data = df)\nmodel4 <- lm(y ~ x1 + x2 + x3 + x4, data = df)\n\nrisks <- tibble(\n  model = c(\"Model 1\", \"Model 2\", \"Model 3\", \"Model 4\"),\n  risk = c(\n    cvInfo(cv(model1, k = 5, criterion = mse)),\n    cvInfo(cv(model2, k = 5, criterion = mse)),\n    cvInfo(cv(model3, k = 5, criterion = mse)),\n    cvInfo(cv(model4, k = 5, criterion = mse))\n  )\n)\nrisks %>%\n  ggplot(aes(x = model, y = risk)) +\n  geom_col() +\n  labs(title = \"Estimated Risk by Model\", y = \"Estimated Risk (MSE)\", x = \"Model\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](lecture_04_model_selection_files/figure-html/variable-selection-1.png){width=576}\n:::\n:::\n\n\n\nBased on our model selection procedure (using 5-fold CV to estimate risk),\nwe would choose **Model 2**, which—in this case—is indeed the correct model!\n\n### Connection to the Algorithmic Perspective\n\n- **Step 1** train/test/val split: the train/val split is implicit in K-fold CV,\n  and the test set is used only at the very end to estimate test error of the final model. (**Do not touch the test set until the very end!**)\n- **Step 4** validation: here is where we actually estimate risk using K-fold CV.\n- **Step 5** iteration: we iterate over different statistical models, estimating their risk using K-fold CV, and performing model selection along the way (i.e. refining our statistical model in ways to reduce risk).\n\n## Summary\n\n- Model selection is the process of choosing the \"best statistical model\" given our training data.\n- We can define \"best\" in terms of expected test error, or risk.\n  In practice, risk is often the most appropriate metric.\n- We can estimate risk using cross-validation. (We will see other estimators later in the course.)\n- **Never use training error to select models!**\n",
    "supporting": [
      "lecture_04_model_selection_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}