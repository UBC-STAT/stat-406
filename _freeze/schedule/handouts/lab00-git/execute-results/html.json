{
  "hash": "d9f9fe2da88e6e7da9322d94f201680f",
  "result": {
    "markdown": "---\ntitle: \"Lab 00 Git\"\ndate: \"Last updated - 8 September 2023\" \n---\n\n\n# Prework\n\n1. Check your \n[Canvas profile settings](https://community.canvaslms.com/t5/Student-Guide/How-do-I-add-contact-methods-to-receive-Canvas-notifications-as/ta-p/516) \nto ensure the email associated with your Canvas account is correct.\n1. Review your \n[Canvas notification settings](https://community.canvaslms.com/t5/Student-Guide/How-do-I-set-my-Canvas-notification-preferences-as-a-student/ta-p/434) \nand decide what you want to be notified about.\n1. Visit the [Course website](/index.qmd). In \nparticular, as you might expect, this course requires computing. We will use R \nand RStudio as well as Git and GitHub. See the \n[Computing](/computing/) tab.\n1. If you have never used GitHub before, go to <https://github.com/> create an \naccount. You should be aware that this data is stored on US servers. Please \nexercise caution whenever using personal information. You may wish to use a \npseudonym to protect your privacy if you have concerns.\n\nIf you haven't already, visit [Computing](/computing/) \nand follow the instructions to set up your computer. \n\n* Clone your `labs-<username>` repo. \n    1. Navigate to the Course GitHub using the link in the Navbar.\n    2. Then go to your `labs-<username>` \n    3. Click the Green \"Code\" button, and copy the url by clicking the two overlapping squares. \n    4. Then in RStudio, choose \"New project\" > \"Version Control\" > \"Git\" and paste the address. \n    5. Choose a location on your machine where you want all your labs to be.\n    6. Select \"Create Project\".\n\n\n# Lab overview\n\nIf you followed all the steps above, you should have an RStudio project for all \nthe labs for this course. You will never have to do any of those steps again \n(except the Cloning, once, for your Homework).\n\nIn this lab, we'll do two things. The first is to demonstrate the \"correct\" way \nto do a lab or assignment and submit it. So we'll get this unfinished lab all \nready for submission. \n\nThe second thing is to explore Git just a little. Specifically, we'll pretend \nlike we're doing another submission and mess everything up. Then we'll fix it. \nFinally, we'll submit the whole lab.\n\n# The right way\n\nBeginning a new Lab or homework assignment always starts out like this.\n\n1. In the upper right quadrant of RStudio, you should see a number of tabs. \nClick the one that says \"Git\".\n1. On the right side it should say `main`. This is the branch you're on. \n1. ALWAYS, start from `main`.\n1. Click ⬇️ Pull. This will make sure that your machine has everything on the remote. If I have to update something, this will get your stuff up-to-date.\n1. Create a new branch by clicking the thing that looks like two purple squares \npointing at a diamond. \n1. You can name your branch anything you like, but I'd suggest `lab00-git` to \ndenote the work that will happen here.\n1. Ensure that \"Sync branch with remote\" is checked and click \"Create\".\n1. Now open `lab00-git.Rmd`. You'll see all the instructions you've been \nlooking at there in that document.\n1. Try to click `Knit` or use `Cmd+Shift+K` (`Ctrl+Shift+K` on Windows/Linux). \nTo render the lab to `.pdf`. You should always do this first to make sure \neverything works.\n1. On the previous line, Delete the last sentence \"You should always do this \nfirst...\". And Save.\n1. Now, looking in the Git panel, you should see `lab00-git.Rmd` and \n`lab00-git.pdf` with check boxes next to them.\n1. Git \"Stages\" your changes when you click the check box. Click the box by \n`lab00-git.Rmd`.\n1. Commit your changes by clicking Commit. A message window will pop up. Type a \nmessage about what you did. Something like \"I hate verbose instructions\". Click \n`Commit`.\n\nThe last two steps are the basic procedure you will always use. You save \nregularly. Every so often (maybe each time you finish a section), you Stage + \nCommit. For a lab to get full credit, you must have done this at least 3 times.\n\nNote, only files that are \"Committed\" will ever go to GitHub for grading. You \nshould only commit the `.Rmd` and the `.pdf`. If other things appear, you may \nbe doing something wrong.\n\nSo at this point you've made one commit. \n\n---\n\n### Aside {.unnumbered}\n\nIn other labs and homework, you'll see something that looks like\n\n```\n::: {.solbox data-latex=\"\"}\n\nsome dumb text\n\n:::\n```\n\nIt's called `.solbox` because that's where your solutions will go. It makes it\neasier for the TAs to find your answers. So don't delete this. You should safely\nput code and markdown text inside, and it will all \"work\".\n\nBut watch out. It **MUST** contain text. That's why it starts with text in it.\nIf you delete it, resulting in an empty box, your document won't Knit.\n\n### End Aside {.unnumbered}\n\n---\n\nLet's pretend, now that we're _Done With The Lab_. You may still see the \nunstaged `.pdf` file in that window. If so, don't worry, ignore that for the \nmoment. Click the Green Up Arrow ⬆️.\n\nThat \"Pushes\" your changes to GitHub. There, the TAs can see what you've done. \nGo back to your Browser and take a look. You may need to refresh the page.\n\nYou should see a Yellow bar that says something like \"`lab00-git` had recent \npushes\" and a Green Button that says \"Compare & pull request\". Click that \nbutton!\n\nNow you can write notes to the TA that will review your work. You give it a \ntitle like \"Submission of Lab 00\". There are also some prompts for you to \naddress. Go ahead and answer all the questions. While you're there, scroll down \nand examine the changes you've made. You should only see a small modification \nto 1 file. Go ahead and click the Green Button that says \"Create pull request\".\n\n<hr>\n\nAt this point, you would be done (kinda). The TAs will automatically be \ntriggered to review your work. They can comment on what you've done and leave \nthe grade. But we're not done. That's OK Even though you've opened the Pull \nRequest (PR), you can still push more changes to the branch. So that's what \nwe'll do.\n\nIn General, you would  \n`for (i in niters) {`\n\n1. `for (j in work)` Do work and save.\n1. Stage and commit changes.\n\n`}`\n\n3. Push your work to GitHub.\n\nWhen done, go to GitHub and open a PR.\n\n> To avoid future headaches: use the dropdown menu in RStudio to go back to \n> `main`.\n\n# The wrong way(s)\n\n## Scenario 1. You do work on the wrong branch.\n\nMake sure that you are on `main`. Remember that the actual submission is on the \n`lab00-git` branch.\n\nIn the R code chunk below, fit a linear model to the data and print the \nestimated coefficients, rounded to 2 decimal places.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nset.seed(12345)\ndat <- tibble(\n  x1 = rnorm(100),\n  x2 = rnorm(100),\n  y = 2 + 3 * x1 - x2 + rnorm(100)\n)\n```\n:::\n\n\nNow, stage the `.Rmd`. Commit with the message \"on the wrong branch\" and push.\n\nYou likely see an error like:\n```\nremote: error: GH006: Protected branch update failed for refs/heads/main.\n```\n\nThat's because you're on `main`. Ugh! But I did some work, and now I need to be \non a different branch!\n\nSo let's fix it. We want the stuff we just did on `main` to be on `lab00-git`. \nNote that everything you did is saved! Here are the steps:\n\n**Get our changes onto the correct branch**\n\n1. Use the dropdown to switch branches to `lab00-git`.\n1. Go to the Terminal (next to console).\n1. Type `git merge main`.\n\nThat should copy all your changes in the `.Rmd` that you made on `main` into \nthe correct place. Did it?\n\nIf you do this and you ever see stuff like\n\n```\n<<<<<<< HEAD\nThis is the stuff that is currently on this branch.\n=======\nThis is stuff that got added on the other branch.\nWhile someone else changed stuff on this branch!\nI (git) don't know which to keep!?\nYou have to decide for me.\n>>>>>>> new_branch_for_merge_conflict\n```\n\nThis means that there were conflicts between the two versions. The stuff above \n`======` was in your current branch. The stuff below is what you're trying to \nmerge in. You decide what to keep, the top, the bottom, or both (or neither). \nJust be sure to delete the junk lines with `<`, `>`, or `=`.\n\n<hr>\n\nOK. So now we have our changes in the right spot. Commit and Push the `.Rmd` \n(only).  Let's clean up `main` so we don't have problems later. Switch back to \n`main`.\n\n**Undo mistakes on the wrong branch.**\n\nIn the Terminal, type `git log`. You should see some commits, one with the \nmessage \"on the wrong branch\". There's a bunch of other text that I won't try \nto explain, but look at the stuff _before_ (meaning below) that message. That's \nthe commit from before you did work on the wrong branch. You should see \nsomething like:\n```\ncommit 1851c738984690b039a79a04e070f766e19993d5\n```\nThat long string is what we're after. It's called a hash, and it uniquely \nidentifies the commit. Take note of the first characters (like 5). That's \nusually enough to get away with.\n\nType `q` to exit the log viewer.`\n\nNow type `git reset --hard 1851c` (replacing `1851c` with the numbers from your \nunique hash). This command will undo any changes after that commmit, but only \nfor this branch. \n\nTo recap, now the work we want is in the right place (on the other branch), and \nthe mess on `main` is cleaned up. Boom.\n\n\n## Scenario 2. You did something you shouldn't have\n\nSwitch your branch back to `lab00-git` (or whatever you named it).\n\nOpen the file `lab01.Rmd`. Select everything after `# Instructions` and delete \nit. Save. Then Knit (producing a pdf). Commit both files with a message \"did \nthe wrong lab, and built a pdf\". Push your commits with the Green up arrow.\n\nTake a look at the PR on GitHub now. There's a bunch of crud that shouldn't be \nthere.\n\nWe've done 3 things here that we shouldn't have.\n\n1. We built a `.pdf` that we don't want at all. It needs to go away.\n1. We bollixed up the `lab01.Rmd` file. We don't want that or it will screw up \nthe lab next week.\n1. We pushed it all into our submission for this week.\n\nThe first instinct is to Delete both files, commit, and push. This is **VERY** \n**BAD**. That will further screw up everything. Basically, you're telling git \n\"I don't want these files at all\" when you mean \"I don't want changes to these \nfiles in this branch\". The difference is subtle but important. Because you DO \nwant these files (without the changes) at some point, but you don't want them \nhere.\n\nLet's fix these issues.\n\n<hr>\n\nFirst, we want to \"get rid of\" the pdf. In the Terminal type\n```\ngit reset HEAD^ -- lab01.pdf\n```\nClick the little \"Refresh\" arrow ↩️ in the Git panel. You should now see \n`lab01.pdf` twice, once with a red D that is checked and once with two yellow \nquestion marks that is NOT checked. This is what we want. Don't click any \nother boxes.\n\nCommit exactly as is. Use a message like \"remove the stray pdf\" and Push. Now, \ntake a look at the PR on GitHub. It should be gone from the list of files in \nthe PR.\n\nThere's still that annoying two-yellow-question-mark version in the Git panel. \nDon't click the check box (that will just redo everything we undid). Instead, \nhighlight the file by clicking the file name, click the Gear Icon Dropdown ⛭, \nand then select \"Revert\". Now it's gone, and the pdf should disappear from your \nfilesystem. \n\n<hr>\n\nSecond, let's \"undo\" the deletion in the `.Rmd`. This is easy, and a useful \npattern to remember. \n\nIn the Terminal, type\n```\ngit checkout main -- lab01.Rmd\n```\n\nWhat this does is grabs the version on `main` that isn't messed up and puts it \nhere, overwriting your changes. This isn't the only way to fix your problem \n(you could have done the same thing we did with the pdf), but it's pretty easy.\n\nStage, commit, and push. Now look at the PR on GitHub. Even though you made two \nchanges (one deleting everything, and one restoring everything) to the \n`lab01.Rmd`, it should be \"gone\" from the PR now. That's because the version on \nthis branch looks just like the version on `main`, so there are no changes to \nbe made into the `main` branch. This is just what we want.\n\n<hr>\n\nNow we've also fixed the third error already. None of those bogus changes to \n`lab01` are in our PR for this week anymore.\n\n# Finish up\n\nYour Git panel should be empty. Take this opportunity to change your branch to \n`main`. This will avoid issues when you start Lab 01 next week.\n\nWe're now done with this lab. This all probably seems a bit painful, but our \ngoal is to avoid all these things in the future. If you're careful, in this \nclass, you won't have to do any of this junk again. In real life, if you work \nin Data Science or Software Development or Machine Learning, you definitely\nwill.\n\n## Let's just recap THE RIGHT WAY.\n\n1. For HW or Labs, always start on `main`.\n1. Pull in the remote ⬇️ just to be sure everything is up-to-date.\n1. Create a branch for your HW/Lab and switch to it. The name doesn't matter, \nbut it's good practice to name in something meaningful (rather than something \nlike `stat406-lab-1` when you're doing lab 4).\n1. Open the HW/Lab `.Rmd` and click Knit. Make sure it works.\n1. Do the work, saving regularly. When you complete a section, Commit the file \nwith a useful message (Push or Not). \n1. Once you're done, make sure that you have done the minimum number of \nCommits, push ⬆️ your `.Rmd` and the knitted `.pdf`.\n1. Open a PR on GitHub and respond to the questions. \n1. Make sure that only the `.Rmd` and the `.pdf` for this HW/Lab are there. And \nCreate Pull Request.\n1. On your machine, switch the branch to `main` to prepare for the next HW/Lab. \n\n\nIf the TA asks for changes, just switch to the branch for this assignment, and \nmake the requested changes. It's all on your machine (even if the pdf \ndisappears when you switch).\n\n\n\n",
    "supporting": [
      "lab00-git_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}