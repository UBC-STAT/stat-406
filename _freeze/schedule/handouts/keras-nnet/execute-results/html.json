{
  "hash": "02d65b4839a2eafbf9a4acca86aa1ab9",
  "result": {
    "markdown": "---\ntitle: \"Keras and Neural Networks\"\nauthor: \"DJM\"\ndate: \"Last updated: 3 November 2023\"\n---\n\n\n\n\n## Installation\n\n_Attribution: this Lab derives mainly from a Vignette in the [R Keras package](https://keras.rstudio.com) under the [MIT License](https://keras.rstudio.com/LICENSE-text.html)._\n\n\nThis proved to be more challenging than I anticipated...\n\nMy setup:\n\n* MacOS M1 Processor\n* R/Rstudio 4.3+\n\nThen, if not already installed, you'll need 2 R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"reticulate\")\nremotes::install_github(\"rstudio/tensorflow\")\ninstall.packages(\"keras\")\n```\n:::\n\n\nNow make sure that python is installed on your system. If it isn't (or if you haven't used it in a while, or if it's somewhere R can't find) this may take a while.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::install_python()\n```\n:::\n\n\nNow restart R before proceeding. \n\nFinally, install the python `keras` package (which also installs `tensorflow`\nand some other things).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeras::install_keras()\n```\n:::\n\n\nRestart R again.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n\n\n## Thoughts on R vs. Python\n\nI'm doing this in R because it's easier to walk through an R notebook than a \nJupyter notebook (for me). \n\nMost deep learning infrastructure is written in Python. So everything here is\nrunning python under the hood. \n\nOnce configured, it doesn't matter which you use: do what you're comfortable \nwith.\n\nThere's nothing special about Python (nor R). Consider this quote from Yann \nLeCun, head of AI at Facebook and one of the three fathers of deep learning \n(posted on Facebook on 26 October 2020):\n\n\n![](lecun-python.png)\n\n\n\n## Overview\n\n\nIn this guide, we will train a neural network model to classify images of \nclothing, like sneakers and shirts. \n\n\n\n\nThis guide uses the \n[Fashion MNIST](https://github.com/zalandoresearch/fashion-mnist) dataset which\ncontains 70,000 grayscale images in 10 categories. The images show individual \narticles of clothing at low resolution (28 by 28 pixels), as seen here:\n\n![](https://s3-eu-central-1.amazonaws.com/zalando-wp-zalando-research-production/2017/08/fashion-mnist-sprite.png)\n\n\nFashion MNIST is intended as a drop-in replacement for the classic [MNIST](http://yann.lecun.com/exdb/mnist/) dataset. The MNIST dataset contains \nimages of handwritten digits (0, 1, 2, etc) in an identical format to the \narticles of clothing we'll use here. The original MNIST was curated by Yann \nLeCun, and he maintained a \n[database of performance results](http://yann.lecun.com/exdb/mnist/) for many \nyears.\n\nHere, we use Fashion MNIST for variety, and because it's a slightly more \nchallenging problem than regular MNIST. Both datasets are relatively small \nand are used to verify that an algorithm works as expected. They're good \nstarting points to test and debug code.\n\nWe will use 60,000 images to train the network and 10,000 images to evaluate \nhow accurately the network learned to classify images. You can access the \nFashion MNIST directly from Keras.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfashion_mnist <- dataset_fashion_mnist()\n\nc(train_images, train_labels) %<-% fashion_mnist$train\nc(test_images, test_labels) %<-% fashion_mnist$test\n```\n:::\n\n\nAt this point we have four arrays: The train_images and train_labels arrays \nare the training set — the data the model uses to learn. The model is tested \nagainst the test set: the test_images, and test_labels arrays.\n\nThe images each are 28 x 28 arrays, with pixel values ranging between 0 and 255.\nThe labels are arrays of integers, ranging from 0 to 9. These correspond to the\nclass of clothing the image represents:\n\nDigit  | Class\n-------| -------------\n0 | T-shirt/top\n1 | Trouser\n2 | Pullover\n3 | Dress\n4 | Coat\n5 | Sandal\n6 | Shirt\n7 | Sneaker\n8 | Bag\n9 | Ankle boot\n\nEach image is mapped to a single label. Since the class names are not included \nwith the dataset, we'll store them in a vector to use later when plotting the \nimages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_names <- c(\n  \"T-shirt/top\",\n  \"Trouser\",\n  \"Pullover\",\n  \"Dress\",\n  \"Coat\",\n  \"Sandal\",\n  \"Shirt\",\n  \"Sneaker\",\n  \"Bag\",\n  \"Ankle boot\"\n)\n```\n:::\n\n\n\n\n## Explore the data\n\nLet's explore the format of the dataset before training the model. The following\nshows there are 60,000 images in the training set, with each image represented \nas 28 x 28 pixels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(train_images)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60000    28    28\n```\n:::\n:::\n\n\n\n\nLikewise, there are 60,000 labels in the training set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(train_labels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60000\n```\n:::\n:::\n\n\n\n\nEach label is an integer between 0 and 9:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_labels[1:20]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 9 0 0 3 0 2 7 2 5 5 0 9 5 5 7 9 1 0 6 4\n```\n:::\n:::\n\n\n\nThere are 10,000 images in the test set. Again, each image is represented as \n28 x 28 pixels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(test_images)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10000    28    28\n```\n:::\n:::\n\n\n\n\nAnd the test set contains 10,000 images labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(test_labels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10000\n```\n:::\n:::\n\n\n\n## Preprocess the data\n\nThe data should be preprocessed before training the network. If you inspect the \nfirst image in the training set, you will see that the pixel values fall in the \nrange of 0 to 255:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage1 <- as.data.frame(train_images[1, , ])\ncolnames(image1) <- seq_len(ncol(image1))\nimage1$y <- seq_len(nrow(image1))\nimage1 <- pivot_longer(image1, -y, names_to = \"x\")\nimage1$x <- as.integer(image1$x)\n\nggplot(image1, aes(x, y, fill = value)) +\n  geom_raster() +\n  scale_fill_gradient(low = \"white\", high = \"#053b64\", na.value = NA) +\n  scale_y_reverse() +\n  theme_void() +\n  theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](keras-nnet_files/figure-html/show-boot-1.png){width=672}\n:::\n:::\n\n\n\nWe scale these values to a range of 0 to 1 before feeding to the neural network\nmodel. For this, we simply divide by 255. The main implications here are for \nstarting values, learning rate, and regularization. The defaults like inputs in \n[0, 1].\n\nIt's important that the training set and the testing set are preprocessed in the\nsame way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_images <- train_images / 255\ntest_images <- test_images / 255\n```\n:::\n\n\n\nDisplay the first 25 images from the training set and display the class name \nabove each image. \n\nVerify that the data is in the correct format and we're ready to build and train\nthe network.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_clothes <- map(1:25, ~ expand_grid(x = 1:28, y = 1:28)) |>\n  list_rbind(names_to = \"idx\")\nimgs <- train_images[1:25, , ]\nimgs <- apply(imgs, 1, c)\ncn <- class_names[train_labels[1:25] + 1]\nnames(cn) <- 1:25\nsample_clothes$value <- c(imgs)\nrm(imgs)\nggplot(sample_clothes, aes(x, y, fill = value)) +\n  geom_raster() +\n  scale_fill_gradient(low = \"white\", high = \"#053b64\", na.value = NA) +\n  scale_y_reverse() +\n  theme_void() +\n  facet_wrap(~idx, nrow = 5, ncol = 5, labeller = labeller(idx = cn)) +\n  theme()\n```\n\n::: {.cell-output-display}\n![](keras-nnet_files/figure-html/show-some-clothes-1.png){width=672}\n:::\n:::\n\n\n\n## Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.\n\n\n### Setup the layers\n\nThe basic building block of a neural network is the layer. Layers extract\nrepresentations from the data fed into them. And, hopefully, these \nrepresentations are more meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers. Most layers, \nlike `layer_dense()`, have parameters that are learned during training.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential()\nmodel |>\n  layer_flatten(input_shape = c(28, 28)) %>% # input\n  layer_dense(units = 128, activation = \"relu\") %>% # hidden layer\n  layer_dense(units = 10, activation = \"softmax\") # output class\n```\n:::\n\n\nThe first layer in this network, `layer_flatten()`, transforms the format of the images from a 2d-array (of 28 by 28 pixels), to a 1d-array of 28 * 28 = 784 \npixels. Think of this layer as unstacking rows of pixels in the image and\nlining them up. This layer has no parameters to learn; it only reformats the \ndata.\n\nAfter the pixels are flattened, the network consists of a sequence of two \n'dense' layers. These are densely-connected, or fully-connected, neural layers. \nThe first dense layer has 128 nodes (or neurons). The second (and last) layer \nis a 10-node softmax layer---this returns an array of 10 probability scores that\nsum to 1. Each node contains a score that indicates the probability that the \ncurrent image belongs to one of the 10 digit classes.\n\n### Compile the model\n\nBefore the model is ready for training, it needs a few more settings. These are\nadded during the model's compile step:\n\n* Loss function: This measures how accurate the model is during training. We \nwant to minimize this function to \"steer\" the model in the right direction.\n* Optimizer: This is how the model is updated based on the data it sees and its\nloss function.\n* Metrics: Used to monitor the training and testing steps. The following example\nuses accuracy, the fraction of the images that are correctly classified.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel |> compile(\n  optimizer = \"adam\",\n  loss = \"sparse_categorical_crossentropy\",\n  metrics = c(\"accuracy\")\n)\n```\n:::\n\n\n\n### Train the model\n\nTraining the neural network model requires the following steps:\n\n1. Feed the training data to the model — in this example, the `train_images` and `train_labels` arrays.\n1. The model learns to associate images and labels.\n1. We ask the model to make predictions about a test set — in this example, the `test_images` array. We verify that the predictions match the labels from the `test_labels` array.\n\nTo start training, call the `fit()` method — the model is \"fit\" to the training\ndata (takes about a minute):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel |> fit(train_images, train_labels, epochs = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/5\n1875/1875 - 9s - loss: 0.5468 - accuracy: 0.8102 - 9s/epoch - 5ms/step\nEpoch 2/5\n1875/1875 - 8s - loss: 0.4775 - accuracy: 0.8356 - 8s/epoch - 4ms/step\nEpoch 3/5\n1875/1875 - 8s - loss: 0.4722 - accuracy: 0.8370 - 8s/epoch - 4ms/step\nEpoch 4/5\n1875/1875 - 9s - loss: 0.4732 - accuracy: 0.8406 - 9s/epoch - 5ms/step\nEpoch 5/5\n1875/1875 - 9s - loss: 0.4783 - accuracy: 0.8379 - 9s/epoch - 5ms/step\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_score <- model |> evaluate(train_images, train_labels, verbose = 0)\ntrain_score\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     loss  accuracy \n0.4885503 0.8282500 \n```\n:::\n:::\n\n\n\nAs the model trains, the loss and accuracy metrics are displayed. This model \nreaches an accuracy of about 83% on \nthe training data.\n\n### Evaluate accuracy\n\nNext, compare how the model performs on the test dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_score <- model |> evaluate(test_images, test_labels, verbose = 0)\ntest_score\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     loss  accuracy \n0.5505691 0.8124000 \n```\n:::\n:::\n\n\nIt turns out, the accuracy on the test data set is a little less than the \naccuracy on the training dataset. \n\n\n### Make predictions\n\nWith the model trained, we can use it to make predictions about some images.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- model |> predict(test_images)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n313/313 - 1s - 514ms/epoch - 2ms/step\n```\n:::\n:::\n\n\nHere, the model has predicted the label for each image in the testing set. Let's\ntake a look at the first prediction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(predictions[1, ], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.000 0.000 0.000 0.000 0.000 0.035 0.000 0.027 0.000 0.938\n```\n:::\n:::\n\n\n\nA prediction is an array of 10 numbers. These are the posterior probabilities \nfor each of the 10 different articles of clothing. We can see which label has \nthe highest confidence value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(predictions[1, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\nAlternatively, we can also directly get the class prediction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_pred <- model |>\n  predict(test_images) |>\n  k_argmax()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n313/313 - 0s - 453ms/epoch - 1ms/step\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.vector(class_pred[1:20])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 9 2 1 1 6 1 4 6 5 7 2 5 5 3 4 1 2 6 8 0\n```\n:::\n:::\n\n\n\n\nAs the labels are 0-based, this actually means a predicted label of 9 would correspond to the label \nfound in `class_names[10]`. So the model is most confident that this image is \nan ankle boot. And we can check the test label to see this is correct:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_labels[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n\n\nLet's plot several images with their predictions. Correct prediction labels \nare blue and incorrect prediction labels are orange\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfcol = c(5, 5))\npar(mar = c(0, 0, 1.5, 0), xaxs = \"i\", yaxs = \"i\")\nfor (i in 1:25) {\n  img <- test_images[i, , ]\n  img <- t(apply(img, 2, rev))\n  # subtract 1 as labels go from 0 to 9\n  predicted_label <- which.max(predictions[i, ]) - 1\n  true_label <- test_labels[i]\n  color <- ifelse(predicted_label == true_label, \"#0b62a4\", \"#ff9200\")\n  image(1:28, 1:28, img,\n    col = gray((255:0) / 255),\n    xaxt = \"n\", yaxt = \"n\",\n    main = paste0(\n      class_names[predicted_label + 1], \" (\",\n      class_names[true_label + 1], \")\"\n    ),\n    col.main = color\n  )\n}\n```\n\n::: {.cell-output-display}\n![](keras-nnet_files/figure-html/plot-w-preds-1.png){width=672}\n:::\n:::\n\n\n\n## What about random forests?\n\nWhat if we just did random forests instead? Takes a good bit less effort.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ranger) # faster version of randomForests\ntrain_images <- t(apply(train_images, 1, c)) # flatten\ntest_images <- t(apply(test_images, 1, c))\ntrain_images <- cbind(train_labels, train_images) |> as_tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n```\n:::\n\n```{.r .cell-code}\ntest_images <- cbind(test_labels, test_images) |> as_tibble()\nnames(train_images) <- c(\"cl\", paste0(\"x\", 1:(ncol(train_images) - 1)))\nnames(test_images) <- names(train_images)\ntrain_images$cl <- as.factor(train_images$cl)\ntest_images$cl <- as.factor(test_images$cl)\nrf <- ranger(cl ~ ., data = train_images, num.trees = 100)\npreds <- predict(rf, data = test_images)\n```\n:::\n\n\nThe Test Set accuracy from Random Forests is \n88%. \n\nSlightly better than the Neural Net for my run, but reasonably close.\n\n",
    "supporting": [
      "keras-nnet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}