{
  "hash": "6dfa99cce6d53e161392d484602fa582",
  "result": {
    "markdown": "---\ntitle: \"{{< fa circle-question >}} Frequently asked questions\"\n---\n\n\n\n\n## How do I succeed in this class?\n\n* Complete readings before the material is covered in class, and then review again afterwards.\n\n* Participate actively in class. If you don't understand something, I can guarantee no one else does either. I have a Ph.D., and I've been doing this for more than 10 years. It's hard for me to remember what it's like to be you and what you don't know. Say something! I want you to learn this stuff, and I love to explain more carefully.\n\n* Come to office hours. Again, I like explaining things.\n\n* Try the Labs again without the help of your classmates. \n\n* Read the examples at the end of the \\[ISLR\\] chapters. Try the exercises.\n\n* Do not procrastinate --- don‚Äôt let a module go by with unanswered questions as it will just make the following module‚Äôs material even more difficult to follow.\n\n* Do the [Worksheets](https://ubc-stat.github.io/stat-406-worksheets). \n\n## Git and Github\n\n### Homework/Labs workflow\n\n**Rstudio version** (uses the Git tab. Usually near Environment/History in the upper right)  \n\n1. Make sure you are on `main`. Pull in remote changes. Click <i class=\"fas fa-arrow-down\" style=\"color:blue\"></i>.\n1. Create a new branch by clicking the think that looks kinda like <i class=\"fas fa-code-branch\" style=\"color:purple\"></i>.\n1. Work on your documents and save frequently.\n1. Stage your changes by clicking the check boxes.\n1. Commit your changes by clicking **Commit**. \n1. Repeat 3-5 as necessary.\n1. Push to Github <i class=\"fas fa-arrow-up\" style=\"color:green\"></i>\n1. When done, go to Github and open a PR.\n1. Use the dropdown menu to go back to `main` and avoid future headaches.\n\n\n**Command line version**  \n\n1. (Optional, but useful. Pull in any remote changes.) `git pull`\n1. Create a new branch `git branch -b <name-of-branch>`\n1. Work on your documents and save frequently.\n1. Stage your changes `git add <name-of-document1>` repeat for each changed document. `git add .` stages all changed documents.\n1. Commit your changes `git commit -m \"some message that is meaningful\"` \n1. Repeat 3-5 as necessary.\n1. Push to Github `git push`. It may suggest a longer form of this command, obey.\n1. When done, go to Github and open a PR. \n1. Switch back to `main` to avoid future headaches. `git checkout main`.\n\n### Asking for a HW regrade.\n\n\n::: {.callout-tip}\n## To be eligible\n\n1. You must have received >3 points of deductions to be eligible.\n1. And they must have been for \"content\", not penalties.\n1. If you fix the errors, you can raise your grade to 7/10.\n1. You must make revisions and re-request review within 1 week of your initial\nreview.\n:::\n\n1. Go to the your local branch for this HW. If you don't remember the right\nname, you can check the PRs in your repo on GitHub by clicking \"Pull Requests\"\ntab. It might be closed.\n1. Make any changes you need to make to the files, commit and push. Make sure\nto rerender the `.pdf` if needed.\n1. Go to GitHub.com and find the original PR for this assignment. There should\nnow be additional commits since the previous Review.\n1. Add a comment to the TA describing the changes you've made. Be concise and\nclear.\n1. Under \"Reviewers\" on the upper right of the screen, you should see a üîÅ \nbutton. Once you click that, the TA will be notified to review your changes.\n\n### Fixing common problems\n\n#### `master/main`\n\n\"master\" has some pretty painful connotations. So as part of an effort to remove racist names from code, the default branch is now \"main\" on new versions of GitHub. But old versions (like the UBC version) still have \"master\". Below, I'll use \"main\", but if you see \"master\" on what you're doing, that's the one to use.\n\n\n#### Start from main\n\nBranches should be created from the `main` branch, not the one you used for the last assignment.  \n```bash\ngit checkout main\n```\nThis switches to `main`. Then pull and start the new assignment following the workflow above. (In Rstudio, use the dropdown menu.)\n\n#### You forgot to work on a new branch  \n\nUgh, you did some labs before realizing you forgot to create a new branch. Don't stress. There are some things below to try. But if you're confused ASK. We've had practice with this, and soon you will too!  \n\n_(1) If you started from `main` and haven't made any commits (but you SAVED!!):_  \n```bash\ngit branch -b <new-branch-name>\n```\nThis keeps everything you have and puts you on a new branch. No problem. Commit and proceed as usual.\n\n_(2) If you are on `main` and made some commits:_\n```bash\ngit branch <new-branch-name>\ngit log\n```\nThe first line makes a new branch with all the stuff you've done. Then we look at the log. Locate the most recent commit before you started working. It's a long string like\n`ac2a8365ce0fa220c11e658c98212020fa2ba7d1`. Then,\n```bash\ngit reset ac2a8 --hard\n```\nThis rolls `main` back to that commit. You don't need the whole string, just the first few characters. Finally\n```bash\ngit checkout <new-branch-name>\n```\nand continue working.\n\n_(3) If you started work on `<some-old-branch>` for work you already submitted:_  \nThis one is harder, and I would suggest getting in touch with the TAs. Here's the procedure.\n```bash\ngit commit -am \"uhoh, I need to be on a different branch\"\ngit branch <new-branch-name>\n```\nCommit your work with a dumb message, then create a new branch. It's got all your stuff.\n```bash\ngit log\n```\nLocate the most recent commit before you started working. It's a long string like `ac2a8365ce0fa220c11e658c98212020fa2ba7d1`. Then,\n```bash\ngit rebase --onto main ac2a8 <new-branch-name>\ngit checkout <new-branch-name>\n```\nThis makes the new branch look like `main` but without the differences from `main` that are on `ac2a8` and WITH all the work you did after `ac2a8`. It's pretty cool. And should work. Finally, we switch to our new branch.\n\n\n### How can I get better at R?\n\nI get this question a lot. The answer is almost never \"go read the book _How to learn R fast_\" or \"watch the video on _FreeRadvice.com_\". To learn programming, the only thing to do is to program. Do your tutorialls. Redo your tutorials. Run through the code in the textbook. Ask yourself why we used one function instead of another. Ask questions. Play little coding games. If you find yourself wondering how some bit of code works, run through it step by step. Print out the results and see what it's doing. If you take on these kinds of tasks regularly, you will improve rapidly. \n\nCoding is an _active_ activity just like learning Spanish. You have to practice constantly. For the same reasons that it is difficult/impossible to learn Spanish just from reading a textbook, it is difficult/impossible to learn R just from reading/watching.\n\nWhen I took German in 7th grade, I remember my teacher saying \"to learn a language, you have to constantly tell lies\". What he meant was, you don't just say \"yesterday I went to the gym\". You say \"yesterday I went to the market\", \"yesterday I went to the movies\", \"today she's going to the gym\", etc. The point is to internalize conjugation, vocabulary, and the inner workings of the language. The same is true when coding. Do things different ways. Try automating regular tasks. \n\nRecommended resources\n\n* [Data Science: A first introduction](https://datasciencebook.ca) This is the course textbook for UBC's DSCI 100\n* [R4DS](https://r4ds.had.co.nz) written by Hadley Wickham and Garrett Grolemund\n* [DSCI 310 Coursenotes](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/README.html) by Tiffany A. Timbers, Joel Ostblom, Florencia D‚ÄôAndrea, and Rodolfo Lourenzutti\n* [Happy Git with R](https://happygitwithr.com) by Jenny Bryan\n* [Modern Dive: Statistical Inference via Data Science](https://moderndive.com) \n* [Stat545](https://stat545.com)\n* [Google](https://duckduckgo.com) \n\n\n\n### My code doesn't run. What do I do?\n\nThis is a constant issue with code, and it happens to everyone. The following is a general workflow for debugging stuck code.\n\n0. If the code is running, but not doing what you want, see [below](#how-to-write-good-code).\n\n1. Read the Error message. It will give you some important hints. Sometimes these are hard to parse, but that's ok.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\ny <- rnorm(10)\nx <- matrix(rnorm(20), 2)\nlinmod <- lm(y ~ x)\n## Error in model.frame.default(formula = y ~ x, drop.unused.levels = TRUE): variable lengths differ (found for 'x')\n```\n:::\n\n\nThis one is a little difficult. The first stuff before the colon is telling me where the error happened, but I didn't use a function called `model.frame.default`. Nonetheless, after the colon it says `variable lengths differ`. Well `y` is length 10 and `x` has 10 rows right? Oh wait, how many rows does `x` have?\n\n2. Read the documentation for the function in the error message. For the above, I should try `?matrix`.\n\n3. Google!! If the first few steps didn't help, copy the error message into Google. This almost always helps. Best to remove any overly specific information first.\n\n4. Ask your classmates Slack. In order to ask most effectively, you should probably provide them some idea of how the error happened. See the section on [MWEs](#minimal-working-examples) for how to do this.\n\n5. See me or the TA. Note that it is highly likely that I will ask if you did the above steps first. And I will want to see your minimal working example (MWE). \n\n::: {.callout-warning}\nIf you meet with me, be prepared to show me your code! Or message me your MWE. Or both. But not neither.\n:::\n\nIf the error cannot be reproduced in my presence, it is very unlikely that I can fix it.\n\n### Minimal working examples\n\nAn MWE is a small bit of code which will work on anyone's machine and reproduce the error that you are getting. This is a key component of getting help debugging. When you do your homework, there's lots of stuff going on that will differ from most other students. To allow them (or me, or the TA) to help you, you need to be able to get their machine to reproduce your error (and *only* your error) without much hassle.\n\nI find that, in the process of preparing an MWE, I can often answer my own question. So it is a useful exercise even if you aren‚Äôt ready to call in the experts yet. The process of stripping your problem down to its bare essence often reveals where the root issue lies. My above code is an MWE: I set a seed, so we both can use _exactly_ the same data, and it's only a few lines long without calling any custom code that you don't have.\n\nFor a good discussion of how to do this, see the [R Lecture](schedule/slides/00-r-review.qmd) or  [stackexchange](https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example-aka-mcve-minimal-complete-and-ver/5963610#5963610).\n\n### How to write good code\n\nThis is covered in much greater detail in the lectures, so see there. Here is my basic advice.\n\n1. Write script files (which you save) and source them. Don't do everything in the console. `R` (and python and Matlab and SAS) is much better as a scripting language than as a calculator.\n2. Don't write anything more than once. This has three corollaries:\n    a. If you are tempted to copy/paste, don't.\n    b. Don't use _magic numbers_. Define all constants at the top of the script.\n    c. Write functions.\n3. The third is __very important__. Functions are easy to test. You give different inputs and check whether the output is as expected. This helps catch mistakes.\n4. There are two kinds of errors: syntax and function.  \n    * The first R can find (missing close parenthesis, wrong arguments, etc.)  \n    * The second you can only catch by thorough testing \n5. Don't use __magic numbers__. \n6. Use meaningful names. Don't do this:\n\n```r\ndata(\"ChickWeight\")\nout <- lm(weight ~ Time + Chick + Diet, data = ChickWeight)\n```\n7. Comment things that aren't clear from the (meaningful) names.\n8. Comment long formulas that don't immediately make sense: \n\n```r\ngarbage <- with(\n  ChickWeight, \n  by(weight, Chick, function(x) (x^2 + 23) / length(x))\n) ## WTF???\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}