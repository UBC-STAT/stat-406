% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/decision-boundary.R
\name{decision_boundary}
\alias{decision_boundary}
\title{Plot decision boundary for a classifier with 2 predictors}
\usage{
decision_boundary(
  fitted_model,
  y,
  x1,
  x2,
  predict_type = NULL,
  predict_fun = NULL,
  resolution = 100,
  showgrid = TRUE,
  ...
)
}
\arguments{
\item{fitted_model}{a fitted classifier object, for example the result of \code{glm(...)}}

\item{y}{the original observed classes}

\item{x1}{original first predictor}

\item{x2}{original second predictor}

\item{predict_type}{default is \code{NULL}, many predict methods accept a \code{type}
argument, if known, this can help to produce classifications}

\item{predict_fun}{if your classifier is different than one of the standard
methods (see below) you can pass a custom function which accepts a single
argument g (a new data dataframe with columns) and produces a vector
of classes}

\item{resolution}{number of points along the two dimensions to produce classes}

\item{showgrid}{do we plot a grid of predictions}

\item{...}{additional arguments passed to \code{plot()}}
}
\value{
If assigned to an object, returns the matrix of predicted classes
}
\description{
Plot decision boundary for a classifier with 2 predictors
}
\details{
This function should work with only the mandatory arguments if the
classifier is produced via \code{glm()}, \code{MASS::lda()}, \code{MASS::qda()} or from either
\code{multinom()} or \code{nnet()} in the \code{{nnet}} package. Other classifiers likely
require additional instructions. If the \code{predict} method produces integer
or factor labels as output, it should just "work".
}
\examples{
x1 = runif(100,-1,1)
x2 = runif(100,-1,1)
y = rbinom(100, 1, 1/(1+exp(-2*x1-3*x2)))

logit = glm(y~x1+x2, family="binomial")
disc = MASS::lda(y~x1+x2)

par(mfrow=c(1,2))
decision_boundary(logit, y, x1, x2)
decision_boundary(disc, y, x1, x2)
par(mfrow=c(1,1))
}
