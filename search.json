[
  {
    "objectID": "schedule/handouts/lab00-git.html",
    "href": "schedule/handouts/lab00-git.html",
    "title": "Lab 00 Git",
    "section": "",
    "text": "Check your Canvas profile settings to ensure the email associated with your Canvas account is correct.\nReview your Canvas notification settings and decide what you want to be notified about.\nVisit the Course website. In particular, as you might expect, this course requires computing. We will use R and RStudio as well as Git and GitHub. See the Computing tab.\nIf you have never used GitHub before, go to https://github.com/ create an account. You should be aware that this data is stored on US servers. Please exercise caution whenever using personal information. You may wish to use a pseudonym to protect your privacy if you have concerns. k_asking_for_help/).\n\nIf you haven’t already, visit https://ubc-stat.github.io/stat-406/computing/ and follow the instructions to set up your computer.\nNow we have to clone your labs-&lt;username&gt; repo.\n\nNavigate to the Course Github using the link at the top of the Course Website or from Canvas.\nThen go to your labs-&lt;username&gt;.\nClick the Green “Code” button, and copy the url by clicking the two overlapping squares.\nThen in RStudio, choose “New project” &gt; “Version Control” &gt; “Git” and paste the address.\nChoose a location on your machine where you want all your labs to be.\nSelect “Create Project”."
  },
  {
    "objectID": "schedule/handouts/lab00-git.html#scenario-1.-you-do-work-on-the-wrong-branch.",
    "href": "schedule/handouts/lab00-git.html#scenario-1.-you-do-work-on-the-wrong-branch.",
    "title": "Lab 00 Git",
    "section": "Scenario 1. You do work on the wrong branch.",
    "text": "Scenario 1. You do work on the wrong branch.\nMake sure that you are on main. Remember that the actual submission is on the lab00-git branch.\nIn the R code chunk below, fit a linear model to the data and print the estimated coefficients, rounded to 2 decimal places.\n\nlibrary(tibble)\nset.seed(12345)\ndat &lt;- tibble(\n  x1 = rnorm(100),\n  x2 = rnorm(100),\n  y = 2 + 3*x1 - x2 + rnorm(100)\n)\n\nNow, stage the .Rmd. Commit with the message “on the wrong branch” and push.\nYou likely see an error like:\nremote: error: GH006: Protected branch update failed for refs/heads/main.\nThat’s because you’re on main. Ugh! But I did some work, and now I need to be on a different branch!\nSo let’s fix it. We want the stuff we just did on main to be on lab00-git. Note that everything you did is saved! Here are the steps:\nGet our changes onto the correct branch\n\nUse the dropdown to switch branches to lab00-git.\nGo to the Terminal (next to console).\nType git merge main.\n\nThat should copy all your changes in the .Rmd that you made on main into the correct place. Did it?\nIf you do this and you ever see stuff like\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is the stuff that is currently on this branch.\n=======\nThis is stuff that got added on the other branch.\nWhile someone else changed stuff on this branch!\nI (git) don't know which to keep!?\nYou have to decide for me.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch_for_merge_conflict\nThis means that there were conflicts between the two versions. The stuff above ====== was in your current branch. The stuff below is what you’re trying to merge in. You decide what to keep, the top, the bottom, or both (or neither). Just be sure to delete the junk lines with &lt;, &gt;, or =.\nOnce you’ve resolved conflicts (and committed the conflict changes), double check the following:\n\nYou are on the correct branch (lab00-git)\nYou have no files with uncommitted changes in the “Git” tab\nYour changes to the R chunk above exist (on this branch)\n\nAnother way you can check for your changes is by running the git log commmand. You should see something like the following:\ncommit 1efefd8473c2cc81893dd2a5ded929978d9ee2aa (HEAD -&gt; lab00-git, main)\nAuthor: Geoff Pleiss &lt;824157+gpleiss@users.noreply.github.com&gt;\nDate:   Fri Aug 30 16:41:58 2024 -0700\n\n    on the wrong branch\n\ncommit 328436d60d8153db7f5b8caef56919b69a5448a2 (origin/main)\nAuthor: Geoff Pleiss &lt;824157+gpleiss@users.noreply.github.com&gt;\nDate:   Fri Aug 30 4:44:09 2024 -0700\n\n    Update git instructions\n\ncommit bb21d0cc444e65be9d801c6b672ba7491509f030\nAuthor: Geoff Pleiss &lt;824157+gpleiss@users.noreply.github.com&gt;\nDate:   Fri Aug 30 10:59:12 2024 -0700\n\n    Init\nThere’s a lot of information here, but you should (hopefully) see at the top your latest commit with the message “on the wrong branch.” The long string at the start of the commit (1efefd8473c2cc81893dd2a5ded929978d9ee2aa) is the hash. It is a unique identifier of the commit, which can be useful if you want to reference a specific commit with other commands.\nType q to exit the log viewer.\n\nOk. So now we have our changes in the right spot. Commit and Push the .Rmd (only). Let’s clean up main so we don’t have problems later. Switch back to main.\nUndo mistakes on the wrong branch.\nIn the terminal, type the following two commands:\ngit fetch\ngit reset --hard origin/main\nThere’s a lot to unpack in these two commands, but here’s the high level idea: we want to make sure that our main branch matches what’s on Github’s remote main branch. The second command resets our local main branch so that it has exactly the same commits as Github’s remote main branch. (The first command makes sure that our local computer knows about the latest changes on Github’s remote branches.)\nIf you now type git log, you should now see\ncommit 328436d60d8153db7f5b8caef56919b69a5448a2 (HEAD -&gt; main, origin/main)\nAuthor: Geoff Pleiss &lt;824157+gpleiss@users.noreply.github.com&gt;\nDate:   Fri Aug 30 4:44:09 2024 -0700\n\n    Update git instructions\n\ncommit bb21d0cc444e65be9d801c6b672ba7491509f030\nAuthor: Geoff Pleiss &lt;824157+gpleiss@users.noreply.github.com&gt;\nDate:   Fri Aug 30 10:59:12 2024 -0700\n\n    Init\nSo our local main branch matches what’s on Github, and no longer contains the “on the wrong branch” commit. You can also verify that your changes to the R code on this branch are now gone.\nTo recap, now the work we want is in the right place (on the other branch), and the mess on main is cleaned up. Boom."
  },
  {
    "objectID": "schedule/handouts/lab00-git.html#scenario-2.-you-did-something-you-shouldnt-have",
    "href": "schedule/handouts/lab00-git.html#scenario-2.-you-did-something-you-shouldnt-have",
    "title": "Lab 00 Git",
    "section": "Scenario 2. You did something you shouldn’t have",
    "text": "Scenario 2. You did something you shouldn’t have\nSwitch your branch back to lab00-git (or whatever you named it).\nOpen the file lab01.Rmd. Select everything after # Instructions and delete it. Save. Then Knit (producing a pdf). Commit both files with a message “did the wrong lab, and built a pdf”. Push your commits with the Green up arrow.\nTake a look at the PR on Github now. There’s a bunch of crud that shouldn’t be there.\nWe’ve done 3 things here that we shouldn’t have.\n\nWe built a pdf that we don’t want at all. It needs to go away.\nWe bollixed up the lab01.Rmd file. We don’t want that or it will screw up the lab next week.\nWe pushed it all into our submission for this week.\n\nThe first instinct is to Delete both files, commit, and push. This is VERY BAD. That will further screw up everything. Basically, you’re telling git “I don’t want these files at all” when you mean “I don’t want changes to these files in this branch”. The difference is subtle but important. Because you DO want these files (without the changes) at some point, but you don’t want them here.\nLet’s fix these issues.\n\nFirst, we want to “get rid of” the pdf. In the Terminal type\ngit reset HEAD^ -- lab01.pdf\nClick the little “Refresh” arrow in the Git panel. You should now see lab01.pdf twice, once with a red D that is checked and once with two yellow question marks that is NOT checked. This is what we want.\nCommit exactly as is. Use a message like “remove the stray pdf” and Push. Now, take a look at the PR on Github. It should be gone from the list of files in the PR.\nThere’s still that annoying two-yellow-question-mark version in the Git panel. Don’t click the check box (that will just redo everything we undid). Instead, highlight the file by clicking the file name, click the Gear Icon Dropdown, and then select “Revert”. Now it’s gone, and the pdf should disappear from your filesystem.\n\nSecond, let’s “undo” the deletion in the .Rmd. This is easy, and a useful pattern to remember.\nIn the Terminal, type\ngit checkout main -- lab01.Rmd\nWhat this does is grabs the version on main that isn’t messed up and puts it here, overwriting your changes. This isn’t the only way to fix your problem (you could have done the same thing we did with the pdf), but it’s pretty easy.\nStage commit and push. Now look at the PR on Github. Even though you made two changes (one deleting everything, and one restoring everything) to the lab01.Rmd, it should be “gone” from the PR now. That’s because the version on this branch looks just like the version on main, so there are no changes to be made into the main branch. This is just what we want.\n\nNow we’ve also fixed the third error already. None of those bogus changes to lab01 are in our PR for this week anymore."
  },
  {
    "objectID": "course-setup.html",
    "href": "course-setup.html",
    "title": "Guide for setting up the course infrastructure",
    "section": "",
    "text": "Version 2025\nThis guide (hopefully) gives enough instructions for recreating new iterations of Stat 406."
  },
  {
    "objectID": "course-setup.html#create-a-github.com-organization",
    "href": "course-setup.html#create-a-github.com-organization",
    "title": "Guide for setting up the course infrastructure",
    "section": "Create a GitHub.com organization",
    "text": "Create a GitHub.com organization\n\nThis is free for faculty with instructor credentials.\n\nNote make sure you upgrade the organization to a “Github Team.” If you have registered your instructor credentials with Github, you should be able to upgrade for free from the Github Global Campus page under “Upgrade your academic organizations.”\n\nAllows more comprehensive GitHub actions, PR templates and CODEOWNER behaviour than the UBC Enterprise version (last I checked)\nDownside is getting students added (though we include R scripts for this)\n\nOnce done, go to https://github.com/watching. Click the Red Down arrow “Unwatch all”. Then select this Org. The TAs should do the same.\n\nPermissions and structure\nSettings &gt; Member Privileges\nWe list only the important ones.\n\nBase Permissions: No Permission\nRepository creation: None\nRepo forking: None\nPages creation: None\nTeam creation rules: No\n\nBe sure to click save in each area after making changes.\nSettings &gt; Actions &gt; General\nAll repositories: Allow all actions and reusable workflows.\nWorkflow permissions: Read and write permissions.\n\n\nTeams\n\n2 teams, one for the TAs and one for the students\nYou must then manually add the teams to any repos they should access\n\nI generally give the TAs “Write” permission, and the students “Read” permission with some exceptions. See the Repos section below."
  },
  {
    "objectID": "course-setup.html#repos",
    "href": "course-setup.html#repos",
    "title": "Guide for setting up the course infrastructure",
    "section": "Repos",
    "text": "Repos\nThere are typically about 10 repositories. Homeworks and Labs each have 3 with very similar behaviours.\nBe careful copying directories. All of them have hidden files and folders, e.g. .git. Of particular importance are the .github directories which contain PR templates and GitHub Actions. Also relevant are the .Rprofile files which try to override Student Language settings and avoid unprintible markdown characters.\n\nHomeworks\n\nhomework-solutions\nThis is where most of the work happens. My practice is to create the homework solutions first. I edit these (before school starts) until I’m happy. I then duplicate the file and remove the answers. The result is hwxx-instructions.Rmd. The .gitignore file should ignore all of the solutions and commit only the instructions. Then, about 1 week after the deadline, I adjust the .gitignore and push the solution files.\n\nStudents have Read permission.\nTAs have Write permission.\nThe preamble.tex file is common to HWs and Labs. It creates a lavender box where the solution will go. This makes life easy for the TAs.\n\n\n\nhomework-template\nThis is a “template repo” used for creating student specific homework-studentgh repos (using the setup scripts).\nVery Important: copy the hwxx-instructions files over to a new directory. Do NOT copy the directory or you’ll end up with the solutions visible to the students.\nThen rename hwxx-instructions.Rmd to hwxx.Rmd. Now the students have a .pdf with instructions, and a template .Rmd to work on.\nOther important tasks:\n\nThe .gitignore is more elaborate in an attempt to avoid students pushing junk into these repos.\nThe .github directory contains 3 files:\n\nCODEOWNERS begins as an empty doc which will be populated with the assigned grader later;\npull_request_template.md is used for all HW submission PRs;\nworkflows contains a GH-action to comment on the PR with the date+time when the PR is opened.\n\nUnder Settings &gt; General, select “Template repository”. This makes it easier to duplicate to the student repos.\nSetup branch protection rules for the main branch. Create a new ruleset for default branches, and select the following:\n\nRequire a pull request before merging\nRequire review from Code Owners\nBlock force pushes\nI recommend adding the @TAs team to the bypass list.\n\n\n\n\n\nLabs\nThe three Labs repos operate exactly as the analogous homework repos.\n\nlabs-solutions\nDo any edits here before class begins.\n\n\nlabs-template\nSame as with the homeworks\n\n\n\nclicker-solutions\nThis contains the complete set of clicker questions.\nAnswers are hidden in comments on the presentation.\nI release them incrementally after each module (copying over from my clicker deck).\n\n\npractice-final\nContains a lengthy practice exam as well as solutions. I usually only post this during the last week of class.\n\n\nopen-pr-log\nThis contains a some GitHub actions to automatically keep track of open PRs for the TAs.\nIt’s still in testing phase, but should work properly. It will create two markdown docs, 1 for labs and 1 for homework. Each shows the assigned TA, the date the PR was opened, and a link to the PR. If everything is configured properly, it should run automatically at 3am every night.\n\nOnly the TAs should have access.\nUnder Settings &gt; Secrets and Variables &gt; Actions you must add a “Repository Secret”. This should be a GitHub Personal Access Token created in your account (Settings &gt; Developer settings &gt; Tokens (classic)). It needs Repo, Workflow, and Admin:Org permissions. I set it to expire at the end of the course. I use it only for this purpose (rather than my other tokens for typical logins).\n\n\n\n.github / .github-private\nThese contain README files that give some basic information about the available repos and the course.\nIt’s visible Publically, and appears on the Org homepage for all to see. The .github-private has the same function, but applies only to Org members.\n\n\nbakeoff-bakeoff\nThis is for the bonus for HW4. Both TAs and Students have access. I put the TA team as CODEOWNERS and protect the main branch (Settings &gt; Branches &gt; Branch Protection Rules). Here, we “Require approvals” and “Require Review from Code Owners”."
  },
  {
    "objectID": "computing/windows.html",
    "href": "computing/windows.html",
    "title": " Windows",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/windows.html#installation-notes",
    "href": "computing/windows.html#installation-notes",
    "title": " Windows",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/windows.html#terminal",
    "href": "computing/windows.html#terminal",
    "title": " Windows",
    "section": "Terminal",
    "text": "Terminal\nBy “Terminal” below we mean the command line program called “Terminal”. Note that this is also available Inside RStudio. Either works."
  },
  {
    "objectID": "computing/windows.html#github",
    "href": "computing/windows.html#github",
    "title": " Windows",
    "section": "GitHub",
    "text": "GitHub\nIn Stat 406 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/windows.html#git-bash-and-windows-terminal",
    "href": "computing/windows.html#git-bash-and-windows-terminal",
    "title": " Windows",
    "section": "Git, Bash, and Windows Terminal",
    "text": "Git, Bash, and Windows Terminal\nAlthough these three are separate programs, we are including them in the same section here since they are packaged together in the same installer on Windows. Briefly, we will be using the Bash shell to interact with our computers via a command line interface, Git to keep a version history of our files and upload to/download from to GitHub, and Windows Terminal to run the both Bash and Git.\nGo to https://git-scm.com/download/win and download the windows version of git. After the download has finished, run the installer and accept the default configuration for all pages except for the following:\n\nOn the Select Components page, add a Git Bash profile to Windows Terminal.\n\n\nTo install windows terminal visit this link and click Get to open it in Windows Store. Inside the Store, click Get again and then click Install. After installation, click Launch to start Windows Terminal. In the top of the window, you will see the tab bar with one open tab, a plus sign, and a down arrow. Click the down arrow and select Settings (or type the shortcut Ctrl + ,). In the Startup section, click the dropdown menu under Default profile and select Git Bash.\n\nYou can now launch the Windows terminal from the start menu or pin it to the taskbar like any other program (you can read the rest of the article linked above for additional tips if you wish). To make sure everything worked, close down Windows Terminal, and open it again. Git Bash should open by default, the text should be green and purple, and the tab should read MINGW64:/c/Users/$USERNAME (you should also see /c/Users/$USERNAME if you type pwd into the terminal). This screenshot shows what it should look like:\n\n\n\n\n\n\n\nNote\n\n\n\nWhenever we refer to “the terminal” in these installation instructions, we want you to use the Windows Terminal that you just installed with the Git Bash profile. Do not use Windows PowerShell, CMD, or anything else unless explicitly instructed to do so.\n\n\nTo open a new tab you can click the plus sign or use Ctrl + Shift + t (you can close a tab with Ctrl + Shift + w). To copy text from the terminal, you can highlight it with the mouse and then click Ctrl + Shift + c. To paste text you use Ctrl + Shift + v, try it by pasting the following into the terminal to check which version of Bash you just installed:\nbash --version\nThe output should look similar to this:\nGNU bash, version 4.4.23(1)-release (x86_64-pc-sys)\nCopyright (C) 2019 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n\n\n\n\n\nNote\n\n\n\nIf there is a newline (the enter character) in the clipboard when you are pasting into the terminal, you will be asked if you are sure you want to paste since this newline will act as if you pressed enter and run the command. As a guideline you can press Paste anyway unless you are sure you don’t want this to happen.\n\n\nLet’s also check which version of git was installed:\ngit --version\ngit version 2.32.0.windows.2\n\n\n\n\n\n\nNote\n\n\n\nSome of the Git commands we will use are only available since Git 2.23, so make sure your if your Git is at least this version.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/windows.html#latex",
    "href": "computing/windows.html#latex",
    "title": " Windows",
    "section": "LaTeX",
    "text": "LaTeX\nIt is possible you already have this installed.\nFirst try the following check in RStudio\nStat406::test_latex_installation()\nIf you see Green checkmarks, then you’re good.\nEven if it fails, follow the instructions, and try it again.\nNote that you might see two error messages regarding lua during the installation, you can safely ignore these, the installation will complete successfully after clicking “OK”.\nIf it still fails, proceed with the instructions\n\nIn RStudio, run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nIn order for Git Bash to be able to find the location of TinyTex, you will need to sign out of Windows and back in again. After doing that, you can check that the installation worked by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2021/W32TeX)\nkpathsea version 6.3.3\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03"
  },
  {
    "objectID": "computing/windows.html#github-pat",
    "href": "computing/windows.html#github-pat",
    "title": " Windows",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “Stat 406 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/windows.html#post-installation-notes",
    "href": "computing/windows.html#post-installation-notes",
    "title": " Windows",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/windows.html#attributions",
    "href": "computing/windows.html#attributions",
    "title": " Windows",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "computing/mac_x86.html",
    "href": "computing/mac_x86.html",
    "title": " MacOS x86",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_x86.html#installation-notes",
    "href": "computing/mac_x86.html#installation-notes",
    "title": " MacOS x86",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_x86.html#terminal",
    "href": "computing/mac_x86.html#terminal",
    "title": " MacOS x86",
    "section": "Terminal",
    "text": "Terminal\nBy “Terminal” below we mean the command line program called “Terminal”. Note that this is also available Inside RStudio. Either works. To easily pull up the Terminal (outside RStudio), Type Cmd + Space then begin typing “Terminal” and press Return."
  },
  {
    "objectID": "computing/mac_x86.html#github",
    "href": "computing/mac_x86.html#github",
    "title": " MacOS x86",
    "section": "GitHub",
    "text": "GitHub\nIn Stat 406 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/mac_x86.html#git",
    "href": "computing/mac_x86.html#git",
    "title": " MacOS x86",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.32.1 (Apple Git-133)\n\n\n\n\n\n\nNote\n\n\n\nIf you run into trouble, please see the Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/mac_x86.html#latex",
    "href": "computing/mac_x86.html#latex",
    "title": " MacOS x86",
    "section": "LaTeX",
    "text": "LaTeX\nIt is possible you already have this installed.\nFirst try the following check in RStudio\nStat406::test_latex_installation()\nIf you see Green checkmarks, then you’re good.\nEven if it fails, follow the instructions, and try it again.\nIf it stall fails, proceed with the instructions\n\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, run the following command to make sure that /usr/local/bin is writable:\nsudo chown -R $(whoami):admin /usr/local/bin\n\n\n\n\n\n\nNote\n\n\n\nYou might be asked to enter your password during installation.\n\n\nNow open RStudio and run the following commands to install the tinytex package and setup tinytex:\ntinytex::install_tinytex()\nYou can check that the installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nkpathsea version 6.3.4/dev\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03"
  },
  {
    "objectID": "computing/mac_x86.html#github-pat",
    "href": "computing/mac_x86.html#github-pat",
    "title": " MacOS x86",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “Stat 406 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/mac_x86.html#post-installation-notes",
    "href": "computing/mac_x86.html#post-installation-notes",
    "title": " MacOS x86",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/mac_x86.html#attributions",
    "href": "computing/mac_x86.html#attributions",
    "title": " MacOS x86",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "computing/index.html",
    "href": "computing/index.html",
    "title": " Computing",
    "section": "",
    "text": "In order to participate in this class, we will require the use of R, and encourage the use of RStudio. Both are free, and you likely already have both.\nYou also need Git, Github and Slack.\nBelow are instructions for installation. These are edited and simplified from the DSCI 310 Setup Instructions. If you took DSCI 310 last year, you may be good to go, with the exception of the R package."
  },
  {
    "objectID": "computing/index.html#laptop-requirements",
    "href": "computing/index.html#laptop-requirements",
    "title": " Computing",
    "section": "Laptop requirements",
    "text": "Laptop requirements\n\nRuns one of the following operating systems: Ubuntu 20.04, macOS (version 11.4.x or higher), Windows 10 (version 2004, 20H2, 21H1 or higher).\n\nWhen installing Ubuntu, checking the box “Install third party…” will (among other things) install proprietary drivers, which can be helpful for wifi and graphics cards.\n\nCan connect to networks via a wireless connection for on campus work\nHas at least 30 GB disk space available\nHas at least 4 GB of RAM\nUses a 64-bit CPU\nIs at most 6 years old (4 years old or newer is recommended)\nUses English as the default language. Using other languages is possible, but we have found that it often causes problems in the homework. We’ve done our best to fix them, but we may ask you to change it if you are having trouble.\nStudent user has full administrative access to the computer."
  },
  {
    "objectID": "computing/index.html#software-installation-instructions",
    "href": "computing/index.html#software-installation-instructions",
    "title": " Computing",
    "section": "Software installation instructions",
    "text": "Software installation instructions\nPlease click the appropriate link below to view the installation instructions for your operating system:\n\nmacOS x86 or macOS arm\nUbuntu\nWindows"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 406",
    "section": "",
    "text": "Jump to Schedule\n\n\nSyllabus"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": " Frequently asked questions",
    "section": "",
    "text": "Working with Git in RStudio involves several key steps:\n\nEnsure you are on the main branch. Pull in remote changes by clicking the down arrow .\nCreate a new branch by clicking the branch icon .\nWork on your documents and save frequently.\nStage your changes by checking the appropriate boxes.\nCommit your changes by clicking Commit.\nRepeat steps 3-5 as needed.\nPush to GitHub by clicking the up arrow .\nOpen a pull request (PR) on GitHub.\nUse the dropdown menu to return to main to avoid potential issues.\n\n\n\n\nIf you prefer using the command line, follow these steps:\n\nPull remote changes (optional but recommended): git pull\nCreate a new branch: git branch -b &lt;name-of-branch&gt;\nWork on your documents and save frequently.\nStage your changes:\n\nFor specific documents: git add &lt;name-of-document1&gt;\nFor all changed documents: git add .\n\nCommit your changes with a meaningful message: git commit -m \"Descriptive commit message\"\nRepeat steps 3-5 as needed.\nPush to GitHub: git push (follow any suggested command variations)\nOpen a pull request on GitHub.\nSwitch back to main: git checkout main"
  },
  {
    "objectID": "faq.html#course-workflow-homework-and-labs",
    "href": "faq.html#course-workflow-homework-and-labs",
    "title": " Frequently asked questions",
    "section": "",
    "text": "Working with Git in RStudio involves several key steps:\n\nEnsure you are on the main branch. Pull in remote changes by clicking the down arrow .\nCreate a new branch by clicking the branch icon .\nWork on your documents and save frequently.\nStage your changes by checking the appropriate boxes.\nCommit your changes by clicking Commit.\nRepeat steps 3-5 as needed.\nPush to GitHub by clicking the up arrow .\nOpen a pull request (PR) on GitHub.\nUse the dropdown menu to return to main to avoid potential issues.\n\n\n\n\nIf you prefer using the command line, follow these steps:\n\nPull remote changes (optional but recommended): git pull\nCreate a new branch: git branch -b &lt;name-of-branch&gt;\nWork on your documents and save frequently.\nStage your changes:\n\nFor specific documents: git add &lt;name-of-document1&gt;\nFor all changed documents: git add .\n\nCommit your changes with a meaningful message: git commit -m \"Descriptive commit message\"\nRepeat steps 3-5 as needed.\nPush to GitHub: git push (follow any suggested command variations)\nOpen a pull request on GitHub.\nSwitch back to main: git checkout main"
  },
  {
    "objectID": "faq.html#homework-regrade-procedure",
    "href": "faq.html#homework-regrade-procedure",
    "title": " Frequently asked questions",
    "section": "Homework Regrade Procedure",
    "text": "Homework Regrade Procedure\n\n\n\n\n\n\nRegrade Eligibility\n\n\n\n\nDeductions must exceed 3 points and be related to content (not penalties).\nErrors can be corrected to potentially raise the grade to 7/10.\nRevisions and review requests must be submitted within one week of the initial review.\n\n\n\nRegrade process:\n\nLocate the local branch for the specific homework assignment.\n\nCheck the “Pull Requests” tab in your GitHub repository if you can’t recall the branch name.\n\nMake necessary corrections to the files.\nCommit and push changes, ensuring the PDF is re-rendered if needed.\nFind the original PR for the assignment on GitHub.\nAdd a concise, clear comment to the TA describing your changes.\nClick the recycling (🔁) button under “Reviewers” to request a review."
  },
  {
    "objectID": "faq.html#common-git-and-workflow-issues",
    "href": "faq.html#common-git-and-workflow-issues",
    "title": " Frequently asked questions",
    "section": "Common Git and Workflow Issues",
    "text": "Common Git and Workflow Issues\n\nmaster/main\n“master” has some pretty painful connotations. So as part of an effort to remove racist names from code, the default branch is now “main” on new versions of GitHub. But old versions (like the UBC version) still have “master”. Below, I’ll use “main”, but if you see “master” on what you’re doing, that’s the one to use.\n\n\nStart from main\nBranches should be created from the main branch, not the one you used for the last assignment.\ngit checkout main\nThis switches to main. Then pull and start the new assignment following the workflow above. (In Rstudio, use the dropdown menu.)\n\n\nYou forgot to work on a new branch\nUgh, you did some labs before realizing you forgot to create a new branch. Don’t stress. There are some things below to try. But if you’re confused ASK. We’ve had practice with this, and soon you will too!\n(1) If you started from main and haven’t made any commits (but you SAVED!!):\ngit branch -b &lt;new-branch-name&gt;\nThis keeps everything you have and puts you on a new branch. No problem. Commit and proceed as usual.\n(2) If you are on main and made some commits:\ngit branch &lt;new-branch-name&gt;\ngit log\nThe first line makes a new branch with all the stuff you’ve done. Then we look at the log. Locate the most recent commit before you started working. It’s a long string like ac2a8365ce0fa220c11e658c98212020fa2ba7d1. Then,\ngit reset ac2a8 --hard\nThis rolls main back to that commit. You don’t need the whole string, just the first few characters. Finally\ngit checkout &lt;new-branch-name&gt;\nand continue working.\n(3) If you started work on &lt;some-old-branch&gt; for work you already submitted: This one is harder, and I would suggest getting in touch with the TAs. Here’s the procedure.\ngit commit -am \"uhoh, I need to be on a different branch\"\ngit branch &lt;new-branch-name&gt;\nCommit your work with a dumb message, then create a new branch. It’s got all your stuff.\ngit log\nLocate the most recent commit before you started working. It’s a long string like ac2a8365ce0fa220c11e658c98212020fa2ba7d1. Then,\ngit rebase --onto main ac2a8 &lt;new-branch-name&gt;\ngit checkout &lt;new-branch-name&gt;\nThis makes the new branch look like main but without the differences from main that are on ac2a8 and WITH all the work you did after ac2a8. It’s pretty cool. And should work. Finally, we switch to our new branch."
  },
  {
    "objectID": "faq.html#improving-your-r-programming-skills",
    "href": "faq.html#improving-your-r-programming-skills",
    "title": " Frequently asked questions",
    "section": "Improving Your R Programming Skills",
    "text": "Improving Your R Programming Skills\n\nLearning Approach\nLearning to code is an active, immersive process. Simply reading books or watching videos is insufficient. To truly learn R:\n\nComplete tutorials multiple times\nExplore textbook code thoroughly\nQuestion the rationale behind function choices\nExperiment with different coding approaches\nBreak down and understand each line of code\n\n\n\nRecommended Learning Resources\n\nData Science: A First Introduction\nR for Data Science\nDSCI 310 Course Notes\nHappy Git with R\nModern Dive: Statistical Inference via Data Science\nStat545"
  },
  {
    "objectID": "faq.html#debugging-code",
    "href": "faq.html#debugging-code",
    "title": " Frequently asked questions",
    "section": "Debugging Code",
    "text": "Debugging Code\n\nGeneral Debugging Workflow\nWhen your code doesn’t run:\n\nIf the code runs but doesn’t produce expected results, see the code quality section.\nRead the Error Message\n\nError messages provide crucial debugging hints\nParsing them can be challenging but is a valuable skill\n\nExample:\n\nset.seed(12345)\ny &lt;- rnorm(10)\nx &lt;- matrix(rnorm(20), 2)\nlinmod &lt;- lm(y ~ x)\n## Error in model.frame.default(formula = y ~ x, drop.unused.levels = TRUE): variable lengths differ (found for 'x')\n\nNotice the error about variable lengths and matrix dimensions.\nConsult Documentation\n\nUse function-specific help (e.g., ?matrix)\n\nSearch Online\n\nCopy error messages into search engines\nRemove specific, identifying information\n\nSeek Peer Help\n\nUse class Slack channels\nPrepare a minimal working example (MWE)\n\nInstructor/TA Consultation\n\nBe prepared to show your code\nProvide a reproducible example\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhen seeking help, always be ready to share your code or MWE.\n\n\nNote: If the error cannot be reproduced, it is unlikely that anyone can help you effectively."
  },
  {
    "objectID": "faq.html#crafting-minimal-working-examples-mwes",
    "href": "faq.html#crafting-minimal-working-examples-mwes",
    "title": " Frequently asked questions",
    "section": "Crafting Minimal Working Examples (MWEs)",
    "text": "Crafting Minimal Working Examples (MWEs)\nAn MWE is a compact code snippet that:\n\nReproduces an error on any machine\nIsolates the specific problem\nMinimizes external dependencies\n\nBenefits of creating MWEs:\n\nOften helps you solve the problem independently\nReveals the root cause of issues\nMakes it easier for others to help you\n\n\nMWE Tips\n\nSet random seeds for reproducibility\nUse minimal, generic data\nInclude only essential code\n\nPreparing an MWE is a valuable debugging skill. By stripping your problem down to its bare essence, you often uncover the root issue. For instance, the previous debugging example was an MWE: it used a fixed seed, ensured data reproducibility, and focused on a specific error.\nFor further guidance, consult:\n\nR Overview Slides\nStack Exchange Discussion on MWEs"
  },
  {
    "objectID": "faq.html#writing-high-quality-code",
    "href": "faq.html#writing-high-quality-code",
    "title": " Frequently asked questions",
    "section": "Writing High-Quality Code",
    "text": "Writing High-Quality Code\nThis is covered in much greater detail in the lectures. Here are key principles for writing clean, efficient R code:\n\nUse Script Files\n\nSave and source scripts\nAvoid console-only work\nTreat R as a scripting language, not a calculator\n\nAvoid Code Repetition\n\nNever copy and paste code\nDefine constants at the script’s beginning\nCreate reusable functions\n\nFunction Design\n\nFunctions are easily testable\nVerify inputs and outputs\nCatch potential errors through comprehensive testing\n\nError Types\n\nSyntax errors (detectable by R)\n\nMissing parentheses\nIncorrect arguments\n\nLogical errors (require thorough testing)\n\nRequire manual verification of results\n\n\nAvoid Magic Numbers\n\nAlways define constants\nMake numerical values meaningful and clear\n\nUse Meaningful Names\nBad example:\ndata(\"ChickWeight\")\nout &lt;- lm(weight ~ Time + Chick + Diet, data = ChickWeight)\nGood example:\ndata(\"ChickWeight\")\nchick_weight_model &lt;- lm(weight ~ Time + Chick + Diet, data = ChickWeight)\nComment Strategically\n\nExplain code that isn’t immediately clear\nFocus on the “why”, not just the “what”\n\nExample of helpful commenting:\n# Calculate weighted average of chick weights, squared and adjusted\nchick_weight_summary &lt;- with(\n  ChickWeight,\n  by(weight, Chick, function(x) (x^2 + 23) / length(x))\n)\n\nRemember: Clear, readable code is as much about communication as it is about functionality."
  },
  {
    "objectID": "computing/mac_arm.html",
    "href": "computing/mac_arm.html",
    "title": " MacOS ARM",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_arm.html#installation-notes",
    "href": "computing/mac_arm.html#installation-notes",
    "title": " MacOS ARM",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version."
  },
  {
    "objectID": "computing/mac_arm.html#terminal",
    "href": "computing/mac_arm.html#terminal",
    "title": " MacOS ARM",
    "section": "Terminal",
    "text": "Terminal\nBy “Terminal” below we mean the command line program called “Terminal”. Note that this is also available Inside RStudio. Either works. To easily pull up the Terminal (outside RStudio), Type Cmd + Space then begin typing “Terminal” and press Return."
  },
  {
    "objectID": "computing/mac_arm.html#github",
    "href": "computing/mac_arm.html#github",
    "title": " MacOS ARM",
    "section": "GitHub",
    "text": "GitHub\nIn Stat 406 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/mac_arm.html#git",
    "href": "computing/mac_arm.html#git",
    "title": " MacOS ARM",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.32.1 (Apple Git-133)\n\n\n\n\n\n\nNote\n\n\n\nIf you run into trouble, please see the Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/mac_arm.html#latex",
    "href": "computing/mac_arm.html#latex",
    "title": " MacOS ARM",
    "section": "LaTeX",
    "text": "LaTeX\nIt is possible you already have this installed.\nFirst try the following check in RStudio\nStat406::test_latex_installation()\nIf you see Green checkmarks, then you’re good.\nEven if it fails, follow the instructions, and try it again.\nIf it stall fails, proceed with the instructions\n\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, run the following command to make sure that /usr/local/bin is writable:\nsudo chown -R $(whoami):admin /usr/local/bin\n\n\n\n\n\n\nNote\n\n\n\nYou might be asked to enter your password during installation.\n\n\nNow open RStudio and run the following commands to install the tinytex package and setup tinytex:\ntinytex::install_tinytex()\nYou can check that the installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nkpathsea version 6.3.4/dev\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03"
  },
  {
    "objectID": "computing/mac_arm.html#github-pat",
    "href": "computing/mac_arm.html#github-pat",
    "title": " MacOS ARM",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “Stat 406 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/mac_arm.html#post-installation-notes",
    "href": "computing/mac_arm.html#post-installation-notes",
    "title": " MacOS ARM",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/mac_arm.html#attributions",
    "href": "computing/mac_arm.html#attributions",
    "title": " MacOS ARM",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "computing/ubuntu.html",
    "href": "computing/ubuntu.html",
    "title": " Ubuntu",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below."
  },
  {
    "objectID": "computing/ubuntu.html#installation-notes",
    "href": "computing/ubuntu.html#installation-notes",
    "title": " Ubuntu",
    "section": "",
    "text": "If you have already installed Git, LaTeX, or any of the R packages, you should be OK. However, if you have difficulty with Homework or Labs, we may ask you to uninstall and try again.\nIn order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below."
  },
  {
    "objectID": "computing/ubuntu.html#ubuntu-software-settings",
    "href": "computing/ubuntu.html#ubuntu-software-settings",
    "title": " Ubuntu",
    "section": "Ubuntu software settings",
    "text": "Ubuntu software settings\nTo ensure that you are installing the right version of the software in this guide, open “Software & Updates” and make sure that the boxes in the screenshot are checked (this is the default configuration)."
  },
  {
    "objectID": "computing/ubuntu.html#github",
    "href": "computing/ubuntu.html#github",
    "title": " Ubuntu",
    "section": "GitHub",
    "text": "GitHub\nIn Stat 406 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "computing/ubuntu.html#git",
    "href": "computing/ubuntu.html#git",
    "title": " Ubuntu",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, so if your Git is older than this version, we ask you to update it using the following commands:\nsudo apt update\nsudo apt install git\nYou can check your git version with the following command:\ngit --version\n\n\n\n\n\n\nNote\n\n\n\nIf you run into trouble, please see the Install Git Linux section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\n\n\n\n\n\nNote\n\n\n\nTo ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command nano ~/.gitconfig) or by typing git config --list --global).\n\n\nIf you have never used Git before, we recommend also setting the default editor:\ngit config --global core.editor nano\nIf you prefer VScode (and know how to set it up) or something else, feel free."
  },
  {
    "objectID": "computing/ubuntu.html#latex",
    "href": "computing/ubuntu.html#latex",
    "title": " Ubuntu",
    "section": "LaTeX",
    "text": "LaTeX\nIt is possible you already have this installed.\nFirst try the following check in RStudio\nStat406::test_latex_installation()\nIf you see Green checkmarks, then you’re good.\nEven if it fails, follow the instructions, and try it again.\nIf it still fails, proceed with the instructions\n\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, run the following command to make sure that /usr/local/bin is writable:\nsudo chown -R $(whoami):admin /usr/local/bin\n\n\n\n\n\n\nNote\n\n\n\nYou might be asked to enter your password during installation.\n\n\nNow open RStudio and run the following commands to install the tinytex package and setup tinytex:\ntinytex::install_tinytex()\nYou can check that the installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nkpathsea version 6.3.4/dev\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03"
  },
  {
    "objectID": "computing/ubuntu.html#github-pat",
    "href": "computing/ubuntu.html#github-pat",
    "title": " Ubuntu",
    "section": "Github PAT",
    "text": "Github PAT\nYou’re probably familiar with 2-factor authentication for your UBC account or other accounts which is a very secure way to protect sensitive information (in case your password gets exposed). Github uses a Personal Access Token (PAT) for the Command Line Interface (CLI) and RStudio. This is different from the password you use to log in with a web browser. You will have to create one. There are some nice R functions that will help you along, and I find that easiest.\nComplete instructions are in Chapter 9 of Happy Git With R. Here’s the quick version (you need the usethis and gitcreds libraries, which you can install with install.packages(c(\"usethis\", \"gitcreds\"))):\n\nIn the RStudio Console, call usethis::create_github_token() This should open a webbrowser. In the Note field, write what you like, perhaps “Stat 406 token”. Then update the Expiration to any date after December 15. (“No expiration” is fine, though not very secure). Make sure that everything in repo is checked. Leave all other checks as is. Scroll to the bottom and click the green “Generate Token” button.\nThis should now give you a long string to Copy. It often looks like ghp_0asfjhlasdfhlkasjdfhlksajdhf9234u. Copy that. (You would use this instead of the browser password in RStudio when it asks for a password).\nTo store the PAT permanently in R (so you’ll never have to do this again, hopefully) call gitcreds::gitcreds_set() and paste the thing you copied there."
  },
  {
    "objectID": "computing/ubuntu.html#post-installation-notes",
    "href": "computing/ubuntu.html#post-installation-notes",
    "title": " Ubuntu",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌!"
  },
  {
    "objectID": "computing/ubuntu.html#attributions",
    "href": "computing/ubuntu.html#attributions",
    "title": " Ubuntu",
    "section": "Attributions",
    "text": "Attributions\nThe DSCI 310 Teaching Team, notably, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": " Syllabus",
    "section": "",
    "text": "Term 2025 Winter 1: 04 Sep - 04 Dec 2025"
  },
  {
    "objectID": "syllabus.html#course-info",
    "href": "syllabus.html#course-info",
    "title": " Syllabus",
    "section": "Course Info",
    "text": "Course Info\nInstructor:\nGeoff Pleiss\nWebsite: https://geoffpleiss.com/\nEmail: geoff.pleiss@stat.ubc.ca\nSlack: @geoff\nOffice hours:\nSee Canvas for times and locations.\nCourse webpage:\nWWW: https://ubc-stat.github.io/stat-406/\nGitHub: https://github.com/stat-406-2025/\nCanvas: https://canvas.ubc.ca/courses/147492/\nLectures/Labs:\nSee Canvas for times and locations.\nTextbooks:\n[ISLR] [ESL]\nPrerequisite:\nSTAT 306 or CPSC 340"
  },
  {
    "objectID": "syllabus.html#course-objectives",
    "href": "syllabus.html#course-objectives",
    "title": " Syllabus",
    "section": "Course Objectives",
    "text": "Course Objectives\nThis course introduces machine learning from a statistical perspective. Beginning with linear models and building beyond STAT 306 content, we will progress to an in-depth coverage of classic and modern learning methods with greater mathematical and statistical depth than CPSC 340.\n\nLearning Outcomes\nThe primary aim of this course is to develop deep statistical intuitions about different learning methods and the connections between these methods. If we are successful, by the end of the course you will be able to:\n\nFormulate and analyze machine learning algorithms from a statistical perspective\nCategorize learning methods through multiple criteria (supervised versus unsupervised, linear versus nonlinear, parametric versus nonparametric, high bias versus high variance)\nDraw connections between any two learning algorithms and paradigms covered in this course\nReason about which methods (regularization, nonlinearities, ensembles) are most appropriate for a given situation using mathematical tools like the bias/variance tradeoff and curse of dimensionality\nApply these methods correctly, troubleshoot common pitfalls, and identify probable steps for improving model performance\nImplement and utilize models in R using best coding practices\n\n\nWhat This Course Is Not\nThis course is not a practitioner’s introduction to machine learning. While you will gain practical skills in the course and you will be equipped to run and troubleshoot models, the emphasis is not on the latest and greatest models, software packages, using high performance compute infrastructure, or data wrangling. There is no project component where you get to build a model of your choice on your own dataset. If this is the content you are looking for, I suggest CPSC 330 or any number of tutorials that exist on the internet.\nThis course is also not a comprehensive introduction to all of the latest and greatest ML methods. Methods evolve constantly, and there are too many of them to introduce in one course. I suggest advanced topics courses in computer science or statistics if you want a flavour of new methods. The foundational methods introduced in this course are building blocks used by all machine learning algorithms. Mastering these concepts will dramatically improve your ability to understand new methods, and it will also help you cut through the BS components of modern ML/AI systems that don’t actually do anything too fancy.\nBuilding fluency with tools and processes is an important part of becoming a statistician or machine learning practitioner, as is being up to date with methods. It is equally important to be able to analyze and reason about the methods and tools that you’re using. The latter is the niche filled by this course."
  },
  {
    "objectID": "syllabus.html#textbooks",
    "href": "syllabus.html#textbooks",
    "title": " Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\nThere are short required readings before each lecture. You will not be quizzed or graded on the readings, but going over the material before seeing it in lecture will accelerate your learning of the material.\n\nRequired\nAn Introduction to Statistical Learning, James, Witten, Hastie, Tibshirani, 2013, Springer, New York. (denoted [ISLR])\nAvailable free online: https://www.statlearning.com\n\n\nOptional (But Excellent)\nThe Elements of Statistical Learning, Hastie, Tibshirani, Friedman, 2009, Second Edition, Springer, New York. (denoted [ESL])\nAlso available free online: https://web.stanford.edu/~hastie/ElemStatLearn/\nThis second book is a more advanced treatment of a superset of the topics we will cover. All readings from [ESL] are optional."
  },
  {
    "objectID": "syllabus.html#lectures",
    "href": "syllabus.html#lectures",
    "title": " Syllabus",
    "section": "Lectures",
    "text": "Lectures\nThis will be taught primarily via lecture, with interactive activities, questions, and discussions interspersed throughout. Attendance is strongly encouraged.\nDeveloping intuitions for this material takes time and effort, and the lectures provide an excellent setting and opportunity for you to ponder, struggle, and engage with the material.\nWhen you attend lecture, I ask that you minimize the use of phones and computers other than for participation and note taking. I know that it is easy to be distracted by homework, social media, or k-pop videos.[^The lecture recordings capture the audience, so I get to see the fun things you’re looking at on your laptops!]\nIf you aren’t able to provide your full attention during class, especially during the participatory activities, I kindly ask that you stay home instead. Your grade won’t suffer (I don’t track attendance) and your health and academic performance will benefit from the extra sleep.\nHere are the benefits for being participatory during lecture:\n\nYou’ll put in the work to develop deep intuitions. We’ll work through derivations during lecture that you won’t see on labs or assignments. Participating in these derivations gives you a different mode for absorbing the material.\nYou get to ask questions. This material is my bread and butter, it’s my area of research, and I have lots of insights that I’m excited to share! I’ll also answer questions over slack and during office hours, but your best bet to get good answers from me is during class.\nYou’ll get participation points. See below for a way to boost your grade by participating during lecture.\nYou’ll get a better letter of recommendation. If you want to apply to graduate school and would consider me for a letter of recommendation, I should know something about you beyond your letter grade. Asking and answering questions during lecture and office hours gives me good material to write about."
  },
  {
    "objectID": "syllabus.html#course-assessment-opportunities",
    "href": "syllabus.html#course-assessment-opportunities",
    "title": " Syllabus",
    "section": "Course Assessment Opportunities",
    "text": "Course Assessment Opportunities\n\nEffort-Based Component\nThe effort-based assessments are your main tools to develop the deep intuitions about ML that we’re trying to achieve in this course. They will ask you to implement and troubleshoot models, wrestle with complex mathematical ideas, and ponder strange phenomena. Think of these assessments like eating your vegetables, doing a workout, or practicing an instrument. The work is hard, but it builds a deeper understanding about statistics and ML methods that you can’t get through other means—helping you learn to formulate algorithms from a statistical perspective, connect different learning methods, and figure out which approaches work best in different situations.\n\n\n\nComponent\nPossible Points\n\n\n\n\nParticipation\n5\n\n\nClickers\n10\n\n\nLabs\n20\n\n\nHomeworks\n40\n\n\nTotal\nmax(60, Participation + Clickers + Labs + Homeworks)\n\n\n\n\nGenerative AI Policy\nChatbots and agentic tools are quite adept with the content that we’ll cover. I used them to help me develop materials for this course (mostly to flesh out/polish ideas rather than to generate content from scratch). I believe they have the potential to aid in your learning, but also the potential to be a tempting shortcut that inhibits your potential to grow from this course.\nTo get the most out of this course, I strongly recommend using generative AI as little as possible. If you feel the need to use it, use it to supplement and strengthen your thinking (e.g. code completion, rewriting bullet points into paragraphs, etc.) rather than to replace your thinking (e.g. feeding the entire assignment into a chatbot or agentic coding tool). Here’s why:\n\nThe goal of this course is developing deep intuitions about challenging material. Developing intuitions requires thinking, meditating, and struggling with content.\nAnyone can use Claude Code, Copilot, or Cursor to develop simple ML models and pipelines. If you want to stand out as a job or graduate student candidate, you need to demonstrate the ability to think beyond what these tools can do.\nThere are enough questions with course-specific subtleties where a chatbot will produce a subpar or wrong answer. Even with really good prompting, you likely won’t score above a 7 or 8 on assignments (which is the median effort grade anyways).\nYou won’t be able to use any AI tools during the midterm or final. There likely won’t be any coding questions, but you don’t want to be too dependent on these tools when it comes to proving your knowledge.\n\nIf you use any generative AI tool on homeworks or labs, I ask that you self report how you used the tools and how they contributed to your learning/ability to understand the assignment. (There will be a box to fill in at the top of every lab and assignment.) Please be as honest as possible, even if you did just get ChatGPT to answer every question for you. Your responses will help me structure the material better especially as these tools evolve.\n\n\n\nParticipation\nI believe that active participation during lecture is the best way to learn the material. To that end, I’ve crafted lectures to be entertaining (especially for 8am!), interactive, and engaging for all learning styles. You can help me (and yourself!) by asking questions, working through course exercises with your neighbours, and sharing insights.\nYou earn participation points by answering questions or contributing to discussions. I’ll use the Agora platform to monitor hand raises and select students. Every time you raise your hand in the Agora app, you earn 1 point. When you’re randomly called on from raised hands, you also gain a point. Your final participation score is calculated as max(5, num_points / num_classes). In essence, if you raise your hand at least once every class, you’ll receive the maximum participation grade.\nNote on attendance. I will not be tracking attendance, so you do not need to alert me if you need to skip the occasional lecture. You can still get a perfect effort-based grade even if you do not participate (though I sincerely hope you choose to do so!)\n\n\n\nClickers\nThroughout lecture, I will ask short multiple choice and True/False questions, which you will answer using the Agora app. For each question, correct answers are worth 4, incorrect answers are worth 2. You get 0 points for not answering.\nSuppose there are N total clicker questions, and you have x points. Your final score for the clicker component is max(0, min(5 * x / N - 5, 10)).\nNote that if your average is less than 1, you get 0 points in this component.\n\n\n\nLabs\nThese are intended to keep you on track. They are to be submitted via pull requests in your personal labs-&lt;username&gt; repo (see the computing tab for descriptions on how to do this).\nLabs typically have a few questions for you to answer or code to implement. These are designed to be done during lab periods, but you can do them on your own as well. These are worth 2 points each up to a maximum of 20 points. They are due at 2300 on the day of your assigned lab section.\nIf you attend lab, you may share a submission with another student (with acknowledgement on the PR). If you do not attend lab, you must work on your own (subject to the collaboration instructions for Assignments below).\n\nRules.\nYou must submit via PR by the deadline. Your PR must include at least 3 commits. After lab 2, failure to include at least 3 commits will result in a maximum score of 1.\n\n\n\n\n\n\nTip\n\n\n\nIf you attend your lab section, you may work in pairs, submitting a single document to one of your Repos. Be sure to put both names on the document, and mention the collaboration on your PR. You still have until 11pm to submit.\n\n\n\n\nMarking.\nThe overriding theme here is “if you put in the effort, you’ll get all the points.” Grading scheme:\n\n2 if basically all correct\n1 if complete but with some major errors, or mostly complete and mostly correct\n0 otherwise\n\nYou may submit as many labs as you wish up to 20 total points. There are no appeals on grades.\n\n\n\n\nHomeworks\nThere will be 4 homework assignments. These are submitted via pull request similar to the labs but to the homework-&lt;username&gt; repo. Each assignment is worth up to 10 points. They are due by 2300 on the deadline. You must make at least 5 commits. Failure to have at least 5 commits will result in a 25% deduction on HW1 and a 50% deduction thereafter. No exceptions.\nAssignments are typically lightly marked. The median last year was 8/10. But they are not easy. Nor are they short. They often involve a combination of coding, writing, description, and production of statistical graphics.\nAfter receiving a mark and feedback, if you score less than 7, you may make corrections to bring your total to 7. This means, if you fix everything that you did wrong, you get 7. Not 10. The revision must be submitted within 1 week of getting your mark. Only 1 revision per assignment. The TA decision is final. Note that the TAs will only regrade parts you missed, but if you somehow make it worse, they can deduct more points.\nThe revision allowance applies only if you got 3 or more points of “content” deductions. If you missed 3 points for content and 2 more for “penalties” (like insufficient commits, code that runs off the side of the page, etc), then you are ineligible.\n\nPolicy on collaboration on assignments\nDiscussing assignments with your classmates is allowed and encouraged, but it is important that every student get practice working on these problems. This means that all the work you turn in must be your own. The general policy on homework collaboration is:\n\nYou must first make a serious effort to solve the problem.\nIf you are stuck after doing so, you may ask for help from another student. You may discuss strategies to solve the problem, but you may not look at their code, nor may they spell out the solution to you step-by-step.\nOnce you have gotten help, you must write your own solution individually. You must disclose, in your GitHub pull request, the names of anyone from whom you got help.\nThis also applies in reverse: if someone approaches you for help, you must not provide it unless they have already attempted to solve the problem, and you may not share your code or spell out the solution step-by-step.\n\n\n\n\n\n\n\nWarning\n\n\n\nAdherence to the above policy means that identical answers, or nearly identical answers, cannot occur. Thus, such occurrences are violations of the Course’s Academic honesty policy.\n\n\nYou can always, of course, ask me for help on Slack. And public Slack questions are allowed and encouraged.\nYou may also use external sources (books, websites, papers, …) to\n\nLook up programming language documentation, find useful packages, find explanations for error messages, or remind yourself about the syntax for some feature. I do this all the time in the real world. Wikipedia is your friend.\nRead about general approaches to solving specific problems (e.g. a guide to dynamic programming or a tutorial on unit testing in your programming language), or\nClarify material from the course notes or assignments.\n\nIf you use code from online or other sources (including generative AI), you must include code comments identifying the source. It must be clear what code you wrote and what code is from other sources. This rule also applies to text, images, and any other material you submit.\nPlease talk to me if you have any questions about this policy. Any form of plagiarism or cheating will result in sanctions to be determined by me, including grade penalties (such as negative points for the assignment or reductions in letter grade) or course failure. I am obliged to report violations to the appropriate University authorities. See also the text below.\n\n\n\n\nYour score on HW, Labs, and Clickers\nThe total you can accumulate across these 3 components is 60 points. But you can get there however you want. The total available is 80 points. The rest is up to you. But with choice, comes responsibility.\nRules:\n\nNothing dropped.\nNo extensions.\nIf you miss a lab or a homework deadline, then you miss it.\nMake up for missed work somewhere else.\nIf you get sick, fine. You miss a few clickers and maybe a lab (though you can do it remotely).\nIf you have a job interview and can’t complete an assignment on time, then skip it.\n\nI’m not going to police this stuff. You don’t need to let me know if you miss an assignment. There is no reason that every single person enrolled in this course shouldn’t get &gt; 65 in this class.\nIllustrative scenarios:\n\nDoing 80% on 4 homeworks (32 points), getting 5 clicker points, completing 9 labs with perfect scores, and gaining 5 participation points gets you 60 points.\nDoing 90% on 4 homeworks (36 points), getting 7 clicker points, completing 6 labs with perfect scores, and gaining 5 participation points gets you 60 points.\nGetting full homeworks (40 points) and full labs (20 points), with 0 clicker and 0 participation points gets you 60 points.\n\nChoose your own adventure. Note that the biggest barrier to getting to 60 is skipping the assignments.\n\n\n\nLate policy\nLate lab/homework submissions will not be accepted.\nMore specifically, any submission that we receive after grading has commenced will receive a 0. We likely won’t start grading at 11:01pm on the due date, so don’t worry if you’re a few minutes late. On the other hand, don’t even bother submitting if you’ve missed the deadline by a few days. This policy may seem harsh, but remember that there are many paths to a full 65 on the effort-based grade. If you miss one assignment, focus on doing well on the other labs/assignments and you might still end up with an A in the course.\n\n\n\n\nSummative Assessment\n\nMidterm Exam\n10 points, in class, on Canvas.\n\nAll multiple choice, True/False, matching.\nThe clickers are the best preparation.\nQuestions may ask you to understand or find mistakes in code.\nNo writing code.\n\n\n\nFinal Exam\n30 points, hand written.\n\nThe midterm and final are very hard. It is intended to separate those who really understand the material from those who don’t. Last year, the median grade on the final was 50%.\nYou can still end up with a very good grade even if you don’t do well on the exams. If you put in the work (do all the effort points) and the median grade on the midterm and final (50%), you’ll get an 80. If you put in the work (do all the effort points) and skip the midterm and final, you get a 60. You do not have to pass the final to pass the course. You don’t even have to take the final.\nThe point of this scheme is for those who work hard to do well. But only those who really understand the material will get 90+."
  },
  {
    "objectID": "syllabus.html#health-issues-and-considerations",
    "href": "syllabus.html#health-issues-and-considerations",
    "title": " Syllabus",
    "section": "Health Issues and Considerations",
    "text": "Health Issues and Considerations\n\n\n\n\n\n\nWarning\n\n\n\nIf you are sick, it’s important that you stay home – no matter what you think you may be sick with (e.g., cold, flu, covid, other).\n\n\n\nSleep is one of the most important factors for your health, and I realize that an 8am class makes good sleep challenging. Work on developing good habits that will enable you to attend class while staying well-rested. However, it may be better to sacrifice in-person attendance than your sleep, especially if you would be so sleep-deprived that you won’t be able to benefit from class. I hope you make responsible decisions.\nYour health precautions help reduce risk and keep everyone safer. In this class, the marking scheme provides flexibility so that you can prioritize your health and still succeed. All work can be completed outside of class with reasonable time allowances.\nIf you do miss class because of illness:\n\nMake connections early in the term with other students in the class. You can help each other by sharing notes. If you don’t yet know anyone in the class, post on the discussion forum to connect with other students.\nConsult the class resources here and on Canvas. We will post all slides, readings, and recordings for each class.\nUse Slack for help.\nCome to virtual office hours.\nSee the marking scheme for reassurance about your flexibility options. No part of your final grade will be directly impacted by missing class.\n\nIf you are sick on midterm day or final exam day, do not attend the exam. You must follow up with your home faculty’s advising office to apply for deferred standing. Students who are granted deferred standing write the final exam at a later date. If you’re a Science student, you must apply for deferred standing (an academic concession) through Science Advising no later than 48 hours after the missed final exam/assignment. Learn more and find the application online. For additional information about academic concessions, see the UBC policy here.\n\n\n\n\n\n\n\nNote\n\n\n\nPlease talk with me if you have any concerns or ask me if you are worried about falling behind."
  },
  {
    "objectID": "syllabus.html#university-policies",
    "href": "syllabus.html#university-policies",
    "title": " Syllabus",
    "section": "University policies",
    "text": "University policies\nUBC provides resources to support student learning and to maintain healthy lifestyles but recognizes that sometimes crises arise and so there are additional resources to access including those for survivors of sexual violence. UBC values respect for the person and ideas of all members of the academic community. Harassment and discrimination are not tolerated nor is suppression of academic freedom. UBC provides appropriate accommodation for students with disabilities and for religious, spiritual and cultural observances. UBC values academic honesty and students are expected to acknowledge the ideas generated by others and to uphold the highest academic standards in all of their actions. Details of the policies and how to access support are available here.\n\nAcademic honesty and standards\nUBC Vancouver Statement\nAcademic honesty is essential to the continued functioning of the University of British Columbia as an institution of higher learning and research. All UBC students are expected to behave as honest and responsible members of an academic community. Breach of those expectations or failure to follow the appropriate policies, principles, rules, and guidelines of the University with respect to academic honesty may result in disciplinary action.\nFor the full statement, please see the 2022/23 Vancouver Academic Calendar\nCourse specific\nWhile course materials are freely available online, selling or distributing homework solutions, lab answers, or exam questions to other students or commercial services is strictly prohibited and violates UBC’s academic integrity policies. Violations will be reported to the Dean of Science and may result in serious academic consequences, including course failure.\nI have caught students cheating on exams in previous years. In my experience, cheating typically stems from students not understanding the material, which usually results in a failing grade even before any penalties are imposed and the incident is reported to the Dean’s office. Please do your own work and utilize the TAs and me as resources. We are here to help if you are struggling.\n\n\n\n\n\n\nCaution\n\n\n\nIf I suspect cheating, your case will be forwarded to the Dean’s office. No questions asked.\n\n\n\n\nAcademic Concessions\nThese are handled according to UBC policy. Please see\n\nUBC student services\nUBC Vancouver Academic Calendar\nFaculty of Science Concessions\n\n\n\nMissed final exam\nStudents who miss the final exam must report to their Faculty advising office within 72 hours of the missed exam, and must supply supporting documentation. Only your Faculty Advising office can grant deferred standing in a course. You must also notify your instructor prior to (if possible) or immediately after the exam. Your instructor will let you know when you are expected to write your deferred exam. Deferred exams will ONLY be provided to students who have applied for and received deferred standing from their Faculty.\n\n\nTake care of yourself\nCourse work at this level can be intense, and I encourage you to take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. I struggle with these issues too, and I try hard to set aside time for things that make me happy (cooking, playing/listening to music, exercise, going for walks).\nAll of us benefit from support during times of struggle. If you are having any problems or concerns, do not hesitate to speak with me. There are also many resources available on campus that can provide help and support. Asking for support sooner rather than later is almost always a good idea.\nIf you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, I strongly encourage you to seek support. UBC Counseling Services is here to help: call 604 822 3811 or visit their website. Consider also reaching out to a friend, faculty member, or family member you trust to help get you the support you need."
  },
  {
    "objectID": "schedule/index.html",
    "href": "schedule/index.html",
    "title": " Schedule",
    "section": "",
    "text": "Required readings are listed below for each module. Readings from ISLR are required, while those from ESL (in parentheses) are optional and supplemental."
  },
  {
    "objectID": "schedule/index.html#the-learning-procedure---models-fitting-model-selection",
    "href": "schedule/index.html#the-learning-procedure---models-fitting-model-selection",
    "title": " Schedule",
    "section": "1 The Learning Procedure - Models, Fitting, Model Selection",
    "text": "1 The Learning Procedure - Models, Fitting, Model Selection\nTopics: Learning through statistician and algorithmic lenses, model selection; cross validation\nLearning Objectives:\n\nFormulate learning problems in terms of statistical models, estimators, and model selection\nIdentify criteria for good statistical models, estimators, and model selection metrics\n\nHandouts and Resources:\n\nProgramming in R .Rmd, .pdf\nUsing RMarkdown .Rmd, .pdf\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReadings\nDeadlines\n\n\n\n\nSep 2\n(no class, Imagine UBC)\n\n\n\n\nSep 4\nClass Overview, Probability Review\n\n\n\n\nSep 9\nIntroduction to Learning, Regression\nISLR 2.1 (ESL 2.4, 2.6)\n\n\n\nSep 11\nLearning (cont.), Classification\nISLR 4.3 (ESL 4.4)\n\n\n\nSep 16\nModel Selection and Cross Validation\nISLR 5.1 (ESL 2.9, 7.10)"
  },
  {
    "objectID": "schedule/index.html#bias-variance-tradeoff-linear-methods",
    "href": "schedule/index.html#bias-variance-tradeoff-linear-methods",
    "title": " Schedule",
    "section": "2 Bias-Variance Tradeoff, Linear Methods",
    "text": "2 Bias-Variance Tradeoff, Linear Methods\nTopics: bias/variance tradeoff; regularized regression (ridge and lasso); non-linearities via basis functions; advanced model selection and analysis\nLearning Objectives:\n\nDecompose prediction error into bias and variance components\nImplement regularized versions of linear regression (ridge, lasso) and understand their impact on bias and variance\nImplement basis expansions for linear regression and understand their impact on bias and variance\nApply closed-form selection techniques to linear methods, and identify factors in the formula that affect bias and variance\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReadings\nDeadlines\n\n\n\n\nSep 18\nBias-Variance Tradeoff\nISLR 2.2 (ESL 7.1-7.3)\nHW 1 due\n\n\nSep 23\nRidge Regression\nISLR 6.2.1 (ESL 3.4.0-3.4.1)\n\n\n\nSep 25\nLasso Regression, Optimization\nISLR 6.2.2-6.2.3 (ESL 3.4.2-3.4.3)\n\n\n\nSep 30\n(no class, Truth and Reconciliation)\n\n\n\n\nOct 2\nBasis Functions\nISLR 7.1, 7.4 (ESL 5.1-5.3)\n\n\n\nOct 7\nModel Selection for Linear Methods\n(ESL 7.6-7.7)"
  },
  {
    "objectID": "schedule/index.html#nonparametric-methods-curse-of-dimensionality",
    "href": "schedule/index.html#nonparametric-methods-curse-of-dimensionality",
    "title": " Schedule",
    "section": "3 Nonparametric Methods, Curse of Dimensionality",
    "text": "3 Nonparametric Methods, Curse of Dimensionality\nTopics: kNN, kernel machines, curse of dimensionality\nLearning Objectives:\n\nAnalyze how dimensionality affects the performance of parametric vs nonparametric methods\nImplement nonparametric methods (kNN, kernel smoothing, kernel machines) and analyze their properties\nWrite the parametric version of nonparametric methods (e.g. kernel ridge regression) and vice versa\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReadings\nDeadlines\n\n\n\n\nOct 9\nkNN\nISLR 3.5 (ESL 2.3.2, 5.4.1)\nHW 2 due\n\n\nOct 14\nKernel Machines\n\n\n\n\nOct 16\nThe Curse of Dimensionality\nISLR 6.4 (ESL 2.5)\n\n\n\nOct 21\nTrees, Review\nISLR 8.1 (ESL 9.2)"
  },
  {
    "objectID": "schedule/index.html#midterm-exam",
    "href": "schedule/index.html#midterm-exam",
    "title": " Schedule",
    "section": "Midterm Exam",
    "text": "Midterm Exam\n\n\n\n\n\n\n\nDate\nTopic\n\n\n\n\nOct 23\nMIDTERM EXAM (In Class)\n\n\n\n\nIn person attendance is required (per Faculty of Science guidelines)\nYou must bring your computer as the exam will be given through Canvas\nPlease arrange to borrow one from the library if you do not have your own. Let me know ASAP if this may pose a problem.\nYou may bring 2 sheets of front/back 8.5 × 11 inch paper with handwritten notes you want to use. No other materials will be allowed.\nThere will be no required coding, but I may show code or output and ask questions about it.\nIt will be entirely multiple choice / True-False / matching, etc. Delivered on Canvas."
  },
  {
    "objectID": "schedule/index.html#ensemble-methods",
    "href": "schedule/index.html#ensemble-methods",
    "title": " Schedule",
    "section": "4 Ensemble Methods",
    "text": "4 Ensemble Methods\nTopics: trees; ensembles; bootstrap; bagging; boosting; random forests\nLearning Objectives:\n\nImplement ensembling methods of base learners and reason through computational tradeoffs\nDifferentiate ensemble methods that reduce bias or variance\nUtilize “hidden advantages” of ensembles around feature importance, uncertainty quantification, etc.\nIdentify inductive bias of decision trees and conditions that yield high bias or high variance\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReadings\nDeadlines\n\n\n\n\nOct 28\nThe Bootstrap\nISLR 5.2 (ESL 7.11, 8.2)\n\n\n\nOct 30\nBagging and Random Forests\nISLR 8.2.0-8.2.2 (ESL 8.7, 15.1-15.3)\n\n\n\nNov 4\nBoosting\nISLR 8.2.3 (ESL 10.1-10.5, 10.9)"
  },
  {
    "objectID": "schedule/index.html#unsupervised-learning-generative-vs-discriminative-modelling",
    "href": "schedule/index.html#unsupervised-learning-generative-vs-discriminative-modelling",
    "title": " Schedule",
    "section": "5 Unsupervised Learning, Generative vs Discriminative Modelling",
    "text": "5 Unsupervised Learning, Generative vs Discriminative Modelling\nTopics: dimension reduction and clustering; generative vs discriminative modelling\nLearning Objectives:\n\nDifferentiate between generative and discriminative modelling approaches and identify when each is most appropriate\nImplement dimensionality reduction techniques (PCA, kernel PCA) and analyze their impact on data representation\nApply clustering algorithms (k-means, Gaussian mixture models) and evaluate their performance using appropriate metrics\nConnect unsupervised learning methods to their generative/discriminative modelling framework\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReadings\nDeadlines\n\n\n\n\nNov 6\nGenerative vs Discriminative Modelling\nISLR 4.2.0, 12.1\nHW 3 due\n\n\nNov 11\n(no class, Midterm Break)\n\n\n\n\nNov 13\nDimensionality Reduction\nISLR 12.2 (ESL 14.5.1, 14.5.4)\n\n\n\nNov 18\nClustering 1\nISLR 12.4.1 (ESL 14.3)\n\n\n\nNov 20\nClustering 2"
  },
  {
    "objectID": "schedule/index.html#deep-learning",
    "href": "schedule/index.html#deep-learning",
    "title": " Schedule",
    "section": "6 Deep Learning",
    "text": "6 Deep Learning\nTopics: neural networks; deep learning architectures; generative AI\nLearning Objectives:\n\nConstruct a basic neural network architecture from simple mathematical building blocks\nArticulate the effects of depth and width on the representational capacity and generalization of neural networks\nConnect neural networks to other methods covered in the course (basis functions, kernel methods, boosting methods)\nDerive the backpropagation algorithm\nEvaluate modern neural network architectures for different problem types\n\n\n\n\n\n\n\n\n\n\nDate\nTopic\nReadings\nDeadlines\n\n\n\n\nNov 25\nIntroduction to Neural Networks\nISLR 10.1-10.2 (ESL 11.1, 11.3)\n\n\n\nNov 27\nNeural Network Optimization\nISLR 10.7-10.8 (ESL 11.4)\nHW 4 due\n\n\nDec 2\nNeural Net Architectures, Generative AI\n\n\n\n\nDec 4\nReview"
  },
  {
    "objectID": "schedule/index.html#final-exam",
    "href": "schedule/index.html#final-exam",
    "title": " Schedule",
    "section": "Final Exam",
    "text": "Final Exam\n\n\n\n\n\n\nImportant\n\n\n\nDo not make any plans to leave Vancouver before the final exam date is announced.\n\n\n\nIn person attendance is required (per Faculty of Science guidelines)\nYou may bring 2 sheets of front/back 8.5 × 11 inch paper with handwritten notes you want to use. No other materials will be allowed."
  }
]