---
lecture: "23 Neural nets - other considerations"
format: revealjs
metadata-files: 
  - _metadata.yml
---

{{< include _titleslide.qmd >}}



## Estimation procedures (training)


Back-propagation

[Advantages:]{.secondary}

-   It's updates only depend on local
    information in the sense that if objects in the hierarchical model
    are unrelated to each other, the updates aren't affected

    (This helps in many ways, most notably in parallel architectures)

-   It doesn't require second-derivative information

-   As the updates are only in terms of $\hat{R}_i$, the algorithm can
    be run in either batch  or online  mode

[Down sides:]{.tertiary}

-   It can be very slow

-   Need to choose the learning rate
    $\gamma_t$

## Other algorithms

There are many  variations on the fitting algorithm

[Stochastic gradient descent:]{.secondary} (SGD) discussed in the optimization lecture

The rest are variations that use lots of tricks

* RMSprop
* Adam
* Adadelta
* Adagrad
* Adamax
* Nadam
* Ftrl


## Regularizing neural networks

NNets can almost always achieve 0 training error. Even with regularization. Because they have so many parameters.

Flavours:

-   a complexity penalization term $\longrightarrow$ solve $\min \hat{R} + \rho(\alpha,\beta)$
-   early stopping on the back propagation algorithm used for fitting


Weight decay
: This is like ridge regression in that we penalize the squared Euclidean norm of the weights $\rho(\mathbf{W},\mathbf{B}) = \sum w_i^2 + \sum b_i^2$

Weight elimination
: This encourages more shrinking of small weights $\rho(\mathbf{W},\mathbf{B}) =  \sum \frac{w_i^2}{1+w_i^2} + \sum \frac{b_i^2}{1 + b_i^2}$ or Lasso-type

Dropout
: In each epoch, randomly choose $z\%$ of the nodes and set those weights to zero.



## Other common pitfalls

There are a few areas to watch out for

[Nonconvexity:]{.tertiary} 

The neural network optimization problem is non-convex. 

This makes any numerical solution highly dependent on the initial values. These should be

* chosen carefully, typically random near 0. [DON'T]{.hand} use all 0.
* regenerated several times to check sensitivity

[Scaling:]{.tertiary}  
Be sure to standardize the covariates before training

## Other common pitfalls

[Number of hidden units:]{.tertiary}  
It is generally
better to have too many hidden units than too few (regularization
can eliminate some).


[Sifting the output:]{.tertiary}

* Choose the solution that minimizes training error
* Choose the solution that minimizes the penalized  training error
* Average the solutions across runs


## Tuning parameters

There are many.

* Regularization
* Stopping criterion
* learning rate
* Architecture
* Dropout %
* others...

These are hard to tune.

In practice, people might choose "some" with a validation set, and fix the rest largely arbitrarily

. . .

More often, people set them all arbitrarily


## Thoughts on NNets {.smaller}

Off the top of my head, without lots of justification

::: flex
::: w-50

ðŸ¤¬ðŸ˜¡ [Why don't statisticians like them?]{.tertiary} ðŸ¤¬ðŸ˜¡

- There is little theory (though this is increasing)
- Stat theory applies to global minima, here, only local determined by the optimizer
- Little understanding of when they work
- In large part, NNets look like logistic regression + feature creation. We understand that well, and in many applications, it performs as well
- Explosion of tuning parameters without a way to decide
- Require massive datasets to work
- Lots of examples where they perform _exceedingly_ poorly
:::

::: w-50


ðŸ”¥ðŸ”¥[Why are they hot?]{.tertiary}ðŸ”¥ðŸ”¥

- Perform exceptionally well on typical CS tasks (images, translation)
- Take advantage of SOTA computing (parallel, GPUs)
- Very good for multinomial logistic regression
- An excellent example of "transfer learning"
- They generate pretty pictures (the nets, pseudo-responses at hidden units)

:::
:::


## Keras

Most people who do deep learning use Python $+$ Keras $+$ Tensorflow

It takes some work to get all this software up and running.

It is possible to do in with R using an [interface to Keras](https://keras.rstudio.com/index.html).

. . .

I used to try to do a walk-through, but the interface is quite brittle

If you want to explore, see the handout:

* Knitted: <https://ubc-stat.github.io/stat-406-lectures/handouts/keras-nnet.html>
* Rmd: <https://ubc-stat.github.io/stat-406-lectures/handouts/keras-nnet.Rmd>


# Double descent and model complexity

##

```{r}
#| echo: false
#| fig-align: center
tweetrmd::tweet_embed("https://twitter.com/daniela_witten/status/1292293102103748609")
```


## Where does this U shape come from?


[MSE = Squared Bias + Variance + Irreducible Noise]{.secondary}


As we increase flexibility:

* Squared bias goes down
* Variance goes up
* Eventually, | $\partial$ Variance | $>$ | $\partial$ Squared Bias |.


[Goal:]{.secondary} Choose amount of flexibility to balance these and minimize MSE.

. . .

[Use CV or something to estimate MSE and decide how much flexibility.]{.hand}


##

```{r, echo=FALSE, eval=TRUE}
tweetrmd::tweet_embed("https://twitter.com/daniela_witten/status/1292293104855158784", hide_thread = "t")
```



## Zero training error and model saturation

* In Deep Learning, the recommendation is to "fit until you get zero training error"

* This somehow magically, leads to a continued decrease in test error.

* So, who cares about the Bias-Variance Trade off!!

. . .

[Lesson:]{.secondary}

BV Trade off is not wrong. ðŸ˜¢

This is a misunderstanding of black box algorithms and flexibility.

We don't even need deep learning to illustrate. 

##

```{r, fig.width=6, fig.height=4, fig.align='center'}
library(splines)
set.seed(20221102)
n <- 20
df <- tibble(
  x = seq(-1.5 * pi, 1.5 * pi, length.out = n),
  y = sin(x) + runif(n, -0.5, 0.5)
)
g <- ggplot(df, aes(x, y)) + geom_point() + stat_function(fun = sin) + ylim(c(-2, 2))
g + stat_smooth(method = lm, formula = y ~ bs(x, df = 4), se = FALSE, color = green) + # too smooth
  stat_smooth(method = lm, formula = y ~ bs(x, df = 8), se = FALSE, color = orange) # looks good
```


##

```{r, fig.width=6, fig.height=4, fig.align='center'}
xn <- seq(-1.5 * pi, 1.5 * pi, length.out = 1000)
# Spline by hand
X <- bs(df$x, df = 20, intercept = TRUE)
Xn <- bs(xn, df = 20, intercept = TRUE)
S <- svd(X)
yhat <- Xn %*% S$v %*% diag(1/S$d) %*% crossprod(S$u, df$y)
g + geom_line(data = tibble(x=xn, y=yhat), colour = orange) +
  ggtitle("20 degrees of freedom")
```

##

```{r, fig.width=6, fig.height=4, fig.align='center'}
xn <- seq(-1.5 * pi, 1.5 * pi, length.out = 1000)
# Spline by hand
X <- bs(df$x, df = 40, intercept = TRUE)
Xn <- bs(xn, df = 40, intercept = TRUE)
S <- svd(X)
yhat <- Xn %*% S$v %*% diag(1/S$d) %*% crossprod(S$u, df$y)
g + geom_line(data = tibble(x = xn, y = yhat), colour = orange) +
  ggtitle("40 degrees of freedom")
```


## What happened?!


```{r}
#| code-line-numbers: "1|3-12|13-16|"
doffs <- 4:50
mse <- function(x, y) mean((x - y)^2)
get_errs <- function(doff) {
  X <- bs(df$x, df = doff, intercept = TRUE)
  Xn <- bs(xn, df = doff, intercept = TRUE)
  S <- svd(X)
  yh <- S$u %*% crossprod(S$u, df$y)
  bhat <- S$v %*% diag(1 / S$d) %*% crossprod(S$u, df$y)
  yhat <- Xn %*% S$v %*% diag(1 / S$d) %*% crossprod(S$u, df$y)
  nb <- sqrt(sum(bhat^2))
  tibble(train = mse(df$y, yh), test = mse(yhat, sin(xn)), norm = nb)
}
errs <- map(doffs, get_errs) |>
  list_rbind() |> 
  mutate(`degrees of freedom` = doffs) |> 
  pivot_longer(train:test, values_to = "error")
```

## What happened?!


```{r}
#| code-fold: true
#| fig-width: 9
#| fig-height: 5
ggplot(errs, aes(`degrees of freedom`, error, color = name)) +
  geom_line(linewidth = 2) + 
  coord_cartesian(ylim = c(0, .12)) +
  scale_x_log10() + 
  scale_colour_manual(values = c(blue, orange), name = "") +
  geom_vline(xintercept = 20)
```

## What happened?!

```{r}
#| code-fold: true
#| fig-width: 9
#| fig-height: 5
best_test <- errs |> filter(name == "test")
min_norm <- best_test$norm[which.min(best_test$error)]
ggplot(best_test, aes(norm, error)) +
  geom_line(colour = blue, size = 2) + ylab("test error") +
  geom_vline(xintercept = min_norm, colour = orange) +
  scale_y_log10() + scale_x_log10() + geom_vline(xintercept = 20)
```


## Degrees of freedom and complexity

* In low dimensions (where $n \gg p$), with linear smoothers, df and model complexity are roughly the same.

* But this relationship breaks down in more complicated settings

* We've already seen this:

```{r, message=FALSE}
library(glmnet)
out <- cv.glmnet(X, df$y, nfolds = n) # leave one out
```

```{r}
#| code-fold: true
#| fig-width: 9
#| fig-height: 2.5
with(
  out, 
  tibble(lambda = lambda, df = nzero, cv = cvm, cvup = cvup, cvlo = cvlo )
) |> 
  filter(df > 0) |>
  pivot_longer(lambda:df) |> 
  ggplot(aes(x = value)) +
  geom_errorbar(aes(ymax = cvup, ymin = cvlo)) +
  geom_point(aes(y = cv), colour = orange) +
  facet_wrap(~ name, strip.position = "bottom", scales = "free_x") +
  scale_y_log10() +
  scale_x_log10() + theme(axis.title.x = element_blank())
```


## Infinite solutions

* In Lasso, df is not really the right measure of complexity

* Better is $\lambda$ or the norm of the coefficients (these are basically the same)

* So what happened with the Splines?

. . .

* When df $= 20$, there's a unique solution that interpolates the data

* When df $> 20$, there are infinitely many solutions that interpolate the data.

Because we used the SVD to solve the system, we happened to pick one: the one that has the smallest $\Vert\hat\beta\Vert_2$

Recent work in Deep Learning shows that SGD has the same property: it returns the local optima with the smallest norm.

If we measure complexity in terms of the norm of the weights, rather than by counting parameters, we don't see double descent anymore.


## The lesson

* Deep learning isn't magic.

* Zero training error with lots of parameters doesn't mean good test error.

* We still need the bias variance tradeoff

* It's intuition still applies: more flexibility eventually leads to increased MSE

* But we need to be careful how we measure complexity.

::: aside

There is very interesting recent theory that says 
when we can expect lower test error to the right of the interpolation threshold
than to the left. 

:::



# Next time...

[Module 5]{.secondary}

[unsupervised learning]{.secondary}




